schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
columns and relationships of "Auto"
"""
type Auto {
  """An array relationship"""
  Awaria(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): [Awaria!]!

  """An aggregate relationship"""
  Awaria_aggregate(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): Awaria_aggregate!

  """An array relationship"""
  Grupa_Aut_Klienta(
    """distinct select on columns"""
    distinct_on: [Grupa_Aut_Klienta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Grupa_Aut_Klienta_order_by!]

    """filter the rows returned"""
    where: Grupa_Aut_Klienta_bool_exp
  ): [Grupa_Aut_Klienta!]!

  """An aggregate relationship"""
  Grupa_Aut_Klienta_aggregate(
    """distinct select on columns"""
    distinct_on: [Grupa_Aut_Klienta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Grupa_Aut_Klienta_order_by!]

    """filter the rows returned"""
    where: Grupa_Aut_Klienta_bool_exp
  ): Grupa_Aut_Klienta_aggregate!

  """An array relationship"""
  Historia_Uzytkownik_Autos(
    """distinct select on columns"""
    distinct_on: [Historia_Uzytkownik_Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Historia_Uzytkownik_Auto_order_by!]

    """filter the rows returned"""
    where: Historia_Uzytkownik_Auto_bool_exp
  ): [Historia_Uzytkownik_Auto!]!

  """An aggregate relationship"""
  Historia_Uzytkownik_Autos_aggregate(
    """distinct select on columns"""
    distinct_on: [Historia_Uzytkownik_Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Historia_Uzytkownik_Auto_order_by!]

    """filter the rows returned"""
    where: Historia_Uzytkownik_Auto_bool_exp
  ): Historia_Uzytkownik_Auto_aggregate!

  """An array relationship"""
  Karta_Orlens(
    """distinct select on columns"""
    distinct_on: [Karta_Orlen_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Karta_Orlen_order_by!]

    """filter the rows returned"""
    where: Karta_Orlen_bool_exp
  ): [Karta_Orlen!]!

  """An aggregate relationship"""
  Karta_Orlens_aggregate(
    """distinct select on columns"""
    distinct_on: [Karta_Orlen_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Karta_Orlen_order_by!]

    """filter the rows returned"""
    where: Karta_Orlen_bool_exp
  ): Karta_Orlen_aggregate!

  """An array relationship"""
  Leasings(
    """distinct select on columns"""
    distinct_on: [Leasing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Leasing_order_by!]

    """filter the rows returned"""
    where: Leasing_bool_exp
  ): [Leasing!]!

  """An aggregate relationship"""
  Leasings_aggregate(
    """distinct select on columns"""
    distinct_on: [Leasing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Leasing_order_by!]

    """filter the rows returned"""
    where: Leasing_bool_exp
  ): Leasing_aggregate!

  """An array relationship"""
  Mandats(
    """distinct select on columns"""
    distinct_on: [Mandat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Mandat_order_by!]

    """filter the rows returned"""
    where: Mandat_bool_exp
  ): [Mandat!]!

  """An aggregate relationship"""
  Mandats_aggregate(
    """distinct select on columns"""
    distinct_on: [Mandat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Mandat_order_by!]

    """filter the rows returned"""
    where: Mandat_bool_exp
  ): Mandat_aggregate!

  """An array relationship"""
  Oponas(
    """distinct select on columns"""
    distinct_on: [Opona_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Opona_order_by!]

    """filter the rows returned"""
    where: Opona_bool_exp
  ): [Opona!]!

  """An aggregate relationship"""
  Oponas_aggregate(
    """distinct select on columns"""
    distinct_on: [Opona_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Opona_order_by!]

    """filter the rows returned"""
    where: Opona_bool_exp
  ): Opona_aggregate!

  """An array relationship"""
  Polisas(
    """distinct select on columns"""
    distinct_on: [Polisa_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Polisa_order_by!]

    """filter the rows returned"""
    where: Polisa_bool_exp
  ): [Polisa!]!

  """An aggregate relationship"""
  Polisas_aggregate(
    """distinct select on columns"""
    distinct_on: [Polisa_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Polisa_order_by!]

    """filter the rows returned"""
    where: Polisa_bool_exp
  ): Polisa_aggregate!

  """An array relationship"""
  Przebiegs(
    """distinct select on columns"""
    distinct_on: [Przebieg_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przebieg_order_by!]

    """filter the rows returned"""
    where: Przebieg_bool_exp
  ): [Przebieg!]!

  """An aggregate relationship"""
  Przebiegs_aggregate(
    """distinct select on columns"""
    distinct_on: [Przebieg_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przebieg_order_by!]

    """filter the rows returned"""
    where: Przebieg_bool_exp
  ): Przebieg_aggregate!

  """An array relationship"""
  Przeglads(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): [Przeglad!]!

  """An aggregate relationship"""
  Przeglads_aggregate(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): Przeglad_aggregate!
  gwarancja: String!
  id: Int!
  is_w_uzyciu: Boolean!
  marka: String!
  model: String!
  numer_rejestracyjny: String!
  numer_vin: String!
  paliwo: String!
  rok_produkcji: Int!
  stan_licznika: Int!
  uwagi: String!
}

"""
aggregated selection of "Auto"
"""
type Auto_aggregate {
  aggregate: Auto_aggregate_fields
  nodes: [Auto!]!
}

"""
aggregate fields of "Auto"
"""
type Auto_aggregate_fields {
  avg: Auto_avg_fields
  count(columns: [Auto_select_column!], distinct: Boolean): Int!
  max: Auto_max_fields
  min: Auto_min_fields
  stddev: Auto_stddev_fields
  stddev_pop: Auto_stddev_pop_fields
  stddev_samp: Auto_stddev_samp_fields
  sum: Auto_sum_fields
  var_pop: Auto_var_pop_fields
  var_samp: Auto_var_samp_fields
  variance: Auto_variance_fields
}

"""aggregate avg on columns"""
type Auto_avg_fields {
  id: Float
  rok_produkcji: Float
  stan_licznika: Float
}

"""
Boolean expression to filter rows from the table "Auto". All fields are combined with a logical 'AND'.
"""
input Auto_bool_exp {
  Awaria: Awaria_bool_exp
  Grupa_Aut_Klienta: Grupa_Aut_Klienta_bool_exp
  Historia_Uzytkownik_Autos: Historia_Uzytkownik_Auto_bool_exp
  Karta_Orlens: Karta_Orlen_bool_exp
  Leasings: Leasing_bool_exp
  Mandats: Mandat_bool_exp
  Oponas: Opona_bool_exp
  Polisas: Polisa_bool_exp
  Przebiegs: Przebieg_bool_exp
  Przeglads: Przeglad_bool_exp
  _and: [Auto_bool_exp!]
  _not: Auto_bool_exp
  _or: [Auto_bool_exp!]
  gwarancja: String_comparison_exp
  id: Int_comparison_exp
  is_w_uzyciu: Boolean_comparison_exp
  marka: String_comparison_exp
  model: String_comparison_exp
  numer_rejestracyjny: String_comparison_exp
  numer_vin: String_comparison_exp
  paliwo: String_comparison_exp
  rok_produkcji: Int_comparison_exp
  stan_licznika: Int_comparison_exp
  uwagi: String_comparison_exp
}

"""
unique or primary key constraints on table "Auto"
"""
enum Auto_constraint {
  """unique or primary key constraint"""
  Auto_pkey
}

"""
input type for incrementing numeric columns in table "Auto"
"""
input Auto_inc_input {
  id: Int
  rok_produkcji: Int
  stan_licznika: Int
}

"""
input type for inserting data into table "Auto"
"""
input Auto_insert_input {
  Awaria: Awaria_arr_rel_insert_input
  Grupa_Aut_Klienta: Grupa_Aut_Klienta_arr_rel_insert_input
  Historia_Uzytkownik_Autos: Historia_Uzytkownik_Auto_arr_rel_insert_input
  Karta_Orlens: Karta_Orlen_arr_rel_insert_input
  Leasings: Leasing_arr_rel_insert_input
  Mandats: Mandat_arr_rel_insert_input
  Oponas: Opona_arr_rel_insert_input
  Polisas: Polisa_arr_rel_insert_input
  Przebiegs: Przebieg_arr_rel_insert_input
  Przeglads: Przeglad_arr_rel_insert_input
  gwarancja: String
  id: Int
  is_w_uzyciu: Boolean
  marka: String
  model: String
  numer_rejestracyjny: String
  numer_vin: String
  paliwo: String
  rok_produkcji: Int
  stan_licznika: Int
  uwagi: String
}

"""aggregate max on columns"""
type Auto_max_fields {
  gwarancja: String
  id: Int
  marka: String
  model: String
  numer_rejestracyjny: String
  numer_vin: String
  paliwo: String
  rok_produkcji: Int
  stan_licznika: Int
  uwagi: String
}

"""aggregate min on columns"""
type Auto_min_fields {
  gwarancja: String
  id: Int
  marka: String
  model: String
  numer_rejestracyjny: String
  numer_vin: String
  paliwo: String
  rok_produkcji: Int
  stan_licznika: Int
  uwagi: String
}

"""
response of any mutation on the table "Auto"
"""
type Auto_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Auto!]!
}

"""
input type for inserting object relation for remote table "Auto"
"""
input Auto_obj_rel_insert_input {
  data: Auto_insert_input!

  """on conflict condition"""
  on_conflict: Auto_on_conflict
}

"""
on conflict condition type for table "Auto"
"""
input Auto_on_conflict {
  constraint: Auto_constraint!
  update_columns: [Auto_update_column!]!
  where: Auto_bool_exp
}

"""Ordering options when selecting data from "Auto"."""
input Auto_order_by {
  Awaria_aggregate: Awaria_aggregate_order_by
  Grupa_Aut_Klienta_aggregate: Grupa_Aut_Klienta_aggregate_order_by
  Historia_Uzytkownik_Autos_aggregate: Historia_Uzytkownik_Auto_aggregate_order_by
  Karta_Orlens_aggregate: Karta_Orlen_aggregate_order_by
  Leasings_aggregate: Leasing_aggregate_order_by
  Mandats_aggregate: Mandat_aggregate_order_by
  Oponas_aggregate: Opona_aggregate_order_by
  Polisas_aggregate: Polisa_aggregate_order_by
  Przebiegs_aggregate: Przebieg_aggregate_order_by
  Przeglads_aggregate: Przeglad_aggregate_order_by
  gwarancja: order_by
  id: order_by
  is_w_uzyciu: order_by
  marka: order_by
  model: order_by
  numer_rejestracyjny: order_by
  numer_vin: order_by
  paliwo: order_by
  rok_produkcji: order_by
  stan_licznika: order_by
  uwagi: order_by
}

"""primary key columns input for table: Auto"""
input Auto_pk_columns_input {
  id: Int!
}

"""
select columns of table "Auto"
"""
enum Auto_select_column {
  """column name"""
  gwarancja

  """column name"""
  id

  """column name"""
  is_w_uzyciu

  """column name"""
  marka

  """column name"""
  model

  """column name"""
  numer_rejestracyjny

  """column name"""
  numer_vin

  """column name"""
  paliwo

  """column name"""
  rok_produkcji

  """column name"""
  stan_licznika

  """column name"""
  uwagi
}

"""
input type for updating data in table "Auto"
"""
input Auto_set_input {
  gwarancja: String
  id: Int
  is_w_uzyciu: Boolean
  marka: String
  model: String
  numer_rejestracyjny: String
  numer_vin: String
  paliwo: String
  rok_produkcji: Int
  stan_licznika: Int
  uwagi: String
}

"""aggregate stddev on columns"""
type Auto_stddev_fields {
  id: Float
  rok_produkcji: Float
  stan_licznika: Float
}

"""aggregate stddev_pop on columns"""
type Auto_stddev_pop_fields {
  id: Float
  rok_produkcji: Float
  stan_licznika: Float
}

"""aggregate stddev_samp on columns"""
type Auto_stddev_samp_fields {
  id: Float
  rok_produkcji: Float
  stan_licznika: Float
}

"""aggregate sum on columns"""
type Auto_sum_fields {
  id: Int
  rok_produkcji: Int
  stan_licznika: Int
}

"""
update columns of table "Auto"
"""
enum Auto_update_column {
  """column name"""
  gwarancja

  """column name"""
  id

  """column name"""
  is_w_uzyciu

  """column name"""
  marka

  """column name"""
  model

  """column name"""
  numer_rejestracyjny

  """column name"""
  numer_vin

  """column name"""
  paliwo

  """column name"""
  rok_produkcji

  """column name"""
  stan_licznika

  """column name"""
  uwagi
}

"""aggregate var_pop on columns"""
type Auto_var_pop_fields {
  id: Float
  rok_produkcji: Float
  stan_licznika: Float
}

"""aggregate var_samp on columns"""
type Auto_var_samp_fields {
  id: Float
  rok_produkcji: Float
  stan_licznika: Float
}

"""aggregate variance on columns"""
type Auto_variance_fields {
  id: Float
  rok_produkcji: Float
  stan_licznika: Float
}

"""
columns and relationships of "Awaria"
"""
type Awaria {
  """An object relationship"""
  Auto: Auto!

  """An object relationship"""
  Status_Awarii: Status_Awarii!

  """An object relationship"""
  Uzytkownik: Uzytkownik!
  adres: String!
  id: Int!
  id_auto: Int!
  id_status_awarii: Int!
  id_uzytkownik: Int!
  opis_szkody: String!
}

"""
aggregated selection of "Awaria"
"""
type Awaria_aggregate {
  aggregate: Awaria_aggregate_fields
  nodes: [Awaria!]!
}

"""
aggregate fields of "Awaria"
"""
type Awaria_aggregate_fields {
  avg: Awaria_avg_fields
  count(columns: [Awaria_select_column!], distinct: Boolean): Int!
  max: Awaria_max_fields
  min: Awaria_min_fields
  stddev: Awaria_stddev_fields
  stddev_pop: Awaria_stddev_pop_fields
  stddev_samp: Awaria_stddev_samp_fields
  sum: Awaria_sum_fields
  var_pop: Awaria_var_pop_fields
  var_samp: Awaria_var_samp_fields
  variance: Awaria_variance_fields
}

"""
order by aggregate values of table "Awaria"
"""
input Awaria_aggregate_order_by {
  avg: Awaria_avg_order_by
  count: order_by
  max: Awaria_max_order_by
  min: Awaria_min_order_by
  stddev: Awaria_stddev_order_by
  stddev_pop: Awaria_stddev_pop_order_by
  stddev_samp: Awaria_stddev_samp_order_by
  sum: Awaria_sum_order_by
  var_pop: Awaria_var_pop_order_by
  var_samp: Awaria_var_samp_order_by
  variance: Awaria_variance_order_by
}

"""
input type for inserting array relation for remote table "Awaria"
"""
input Awaria_arr_rel_insert_input {
  data: [Awaria_insert_input!]!

  """on conflict condition"""
  on_conflict: Awaria_on_conflict
}

"""aggregate avg on columns"""
type Awaria_avg_fields {
  id: Float
  id_auto: Float
  id_status_awarii: Float
  id_uzytkownik: Float
}

"""
order by avg() on columns of table "Awaria"
"""
input Awaria_avg_order_by {
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
}

"""
Boolean expression to filter rows from the table "Awaria". All fields are combined with a logical 'AND'.
"""
input Awaria_bool_exp {
  Auto: Auto_bool_exp
  Status_Awarii: Status_Awarii_bool_exp
  Uzytkownik: Uzytkownik_bool_exp
  _and: [Awaria_bool_exp!]
  _not: Awaria_bool_exp
  _or: [Awaria_bool_exp!]
  adres: String_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  id_status_awarii: Int_comparison_exp
  id_uzytkownik: Int_comparison_exp
  opis_szkody: String_comparison_exp
}

"""
unique or primary key constraints on table "Awaria"
"""
enum Awaria_constraint {
  """unique or primary key constraint"""
  Awaria_pkey
}

"""
input type for incrementing numeric columns in table "Awaria"
"""
input Awaria_inc_input {
  id: Int
  id_auto: Int
  id_status_awarii: Int
  id_uzytkownik: Int
}

"""
input type for inserting data into table "Awaria"
"""
input Awaria_insert_input {
  Auto: Auto_obj_rel_insert_input
  Status_Awarii: Status_Awarii_obj_rel_insert_input
  Uzytkownik: Uzytkownik_obj_rel_insert_input
  adres: String
  id: Int
  id_auto: Int
  id_status_awarii: Int
  id_uzytkownik: Int
  opis_szkody: String
}

"""aggregate max on columns"""
type Awaria_max_fields {
  adres: String
  id: Int
  id_auto: Int
  id_status_awarii: Int
  id_uzytkownik: Int
  opis_szkody: String
}

"""
order by max() on columns of table "Awaria"
"""
input Awaria_max_order_by {
  adres: order_by
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
  opis_szkody: order_by
}

"""aggregate min on columns"""
type Awaria_min_fields {
  adres: String
  id: Int
  id_auto: Int
  id_status_awarii: Int
  id_uzytkownik: Int
  opis_szkody: String
}

"""
order by min() on columns of table "Awaria"
"""
input Awaria_min_order_by {
  adres: order_by
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
  opis_szkody: order_by
}

"""
response of any mutation on the table "Awaria"
"""
type Awaria_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Awaria!]!
}

"""
on conflict condition type for table "Awaria"
"""
input Awaria_on_conflict {
  constraint: Awaria_constraint!
  update_columns: [Awaria_update_column!]!
  where: Awaria_bool_exp
}

"""Ordering options when selecting data from "Awaria"."""
input Awaria_order_by {
  Auto: Auto_order_by
  Status_Awarii: Status_Awarii_order_by
  Uzytkownik: Uzytkownik_order_by
  adres: order_by
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
  opis_szkody: order_by
}

"""primary key columns input for table: Awaria"""
input Awaria_pk_columns_input {
  id: Int!
}

"""
select columns of table "Awaria"
"""
enum Awaria_select_column {
  """column name"""
  adres

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_status_awarii

  """column name"""
  id_uzytkownik

  """column name"""
  opis_szkody
}

"""
input type for updating data in table "Awaria"
"""
input Awaria_set_input {
  adres: String
  id: Int
  id_auto: Int
  id_status_awarii: Int
  id_uzytkownik: Int
  opis_szkody: String
}

"""aggregate stddev on columns"""
type Awaria_stddev_fields {
  id: Float
  id_auto: Float
  id_status_awarii: Float
  id_uzytkownik: Float
}

"""
order by stddev() on columns of table "Awaria"
"""
input Awaria_stddev_order_by {
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
}

"""aggregate stddev_pop on columns"""
type Awaria_stddev_pop_fields {
  id: Float
  id_auto: Float
  id_status_awarii: Float
  id_uzytkownik: Float
}

"""
order by stddev_pop() on columns of table "Awaria"
"""
input Awaria_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
}

"""aggregate stddev_samp on columns"""
type Awaria_stddev_samp_fields {
  id: Float
  id_auto: Float
  id_status_awarii: Float
  id_uzytkownik: Float
}

"""
order by stddev_samp() on columns of table "Awaria"
"""
input Awaria_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
}

"""aggregate sum on columns"""
type Awaria_sum_fields {
  id: Int
  id_auto: Int
  id_status_awarii: Int
  id_uzytkownik: Int
}

"""
order by sum() on columns of table "Awaria"
"""
input Awaria_sum_order_by {
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
}

"""
update columns of table "Awaria"
"""
enum Awaria_update_column {
  """column name"""
  adres

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_status_awarii

  """column name"""
  id_uzytkownik

  """column name"""
  opis_szkody
}

"""aggregate var_pop on columns"""
type Awaria_var_pop_fields {
  id: Float
  id_auto: Float
  id_status_awarii: Float
  id_uzytkownik: Float
}

"""
order by var_pop() on columns of table "Awaria"
"""
input Awaria_var_pop_order_by {
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
}

"""aggregate var_samp on columns"""
type Awaria_var_samp_fields {
  id: Float
  id_auto: Float
  id_status_awarii: Float
  id_uzytkownik: Float
}

"""
order by var_samp() on columns of table "Awaria"
"""
input Awaria_var_samp_order_by {
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
}

"""aggregate variance on columns"""
type Awaria_variance_fields {
  id: Float
  id_auto: Float
  id_status_awarii: Float
  id_uzytkownik: Float
}

"""
order by variance() on columns of table "Awaria"
"""
input Awaria_variance_order_by {
  id: order_by
  id_auto: order_by
  id_status_awarii: order_by
  id_uzytkownik: order_by
}

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
columns and relationships of "Grupa_Aut_Klienta"
"""
type Grupa_Aut_Klienta {
  """An object relationship"""
  Auto: Auto!

  """An object relationship"""
  Klient: Klient!
  created_at: timestamptz!
  id: Int!
  id_auto: Int!
  id_klient: Int!
}

"""
aggregated selection of "Grupa_Aut_Klienta"
"""
type Grupa_Aut_Klienta_aggregate {
  aggregate: Grupa_Aut_Klienta_aggregate_fields
  nodes: [Grupa_Aut_Klienta!]!
}

"""
aggregate fields of "Grupa_Aut_Klienta"
"""
type Grupa_Aut_Klienta_aggregate_fields {
  avg: Grupa_Aut_Klienta_avg_fields
  count(columns: [Grupa_Aut_Klienta_select_column!], distinct: Boolean): Int!
  max: Grupa_Aut_Klienta_max_fields
  min: Grupa_Aut_Klienta_min_fields
  stddev: Grupa_Aut_Klienta_stddev_fields
  stddev_pop: Grupa_Aut_Klienta_stddev_pop_fields
  stddev_samp: Grupa_Aut_Klienta_stddev_samp_fields
  sum: Grupa_Aut_Klienta_sum_fields
  var_pop: Grupa_Aut_Klienta_var_pop_fields
  var_samp: Grupa_Aut_Klienta_var_samp_fields
  variance: Grupa_Aut_Klienta_variance_fields
}

"""
order by aggregate values of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_aggregate_order_by {
  avg: Grupa_Aut_Klienta_avg_order_by
  count: order_by
  max: Grupa_Aut_Klienta_max_order_by
  min: Grupa_Aut_Klienta_min_order_by
  stddev: Grupa_Aut_Klienta_stddev_order_by
  stddev_pop: Grupa_Aut_Klienta_stddev_pop_order_by
  stddev_samp: Grupa_Aut_Klienta_stddev_samp_order_by
  sum: Grupa_Aut_Klienta_sum_order_by
  var_pop: Grupa_Aut_Klienta_var_pop_order_by
  var_samp: Grupa_Aut_Klienta_var_samp_order_by
  variance: Grupa_Aut_Klienta_variance_order_by
}

"""
input type for inserting array relation for remote table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_arr_rel_insert_input {
  data: [Grupa_Aut_Klienta_insert_input!]!

  """on conflict condition"""
  on_conflict: Grupa_Aut_Klienta_on_conflict
}

"""aggregate avg on columns"""
type Grupa_Aut_Klienta_avg_fields {
  id: Float
  id_auto: Float
  id_klient: Float
}

"""
order by avg() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_avg_order_by {
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""
Boolean expression to filter rows from the table "Grupa_Aut_Klienta". All fields are combined with a logical 'AND'.
"""
input Grupa_Aut_Klienta_bool_exp {
  Auto: Auto_bool_exp
  Klient: Klient_bool_exp
  _and: [Grupa_Aut_Klienta_bool_exp!]
  _not: Grupa_Aut_Klienta_bool_exp
  _or: [Grupa_Aut_Klienta_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  id_klient: Int_comparison_exp
}

"""
unique or primary key constraints on table "Grupa_Aut_Klienta"
"""
enum Grupa_Aut_Klienta_constraint {
  """unique or primary key constraint"""
  Grupa_Aut_Klienta_pkey
}

"""
input type for incrementing numeric columns in table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_inc_input {
  id: Int
  id_auto: Int
  id_klient: Int
}

"""
input type for inserting data into table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_insert_input {
  Auto: Auto_obj_rel_insert_input
  Klient: Klient_obj_rel_insert_input
  created_at: timestamptz
  id: Int
  id_auto: Int
  id_klient: Int
}

"""aggregate max on columns"""
type Grupa_Aut_Klienta_max_fields {
  created_at: timestamptz
  id: Int
  id_auto: Int
  id_klient: Int
}

"""
order by max() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_max_order_by {
  created_at: order_by
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""aggregate min on columns"""
type Grupa_Aut_Klienta_min_fields {
  created_at: timestamptz
  id: Int
  id_auto: Int
  id_klient: Int
}

"""
order by min() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_min_order_by {
  created_at: order_by
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""
response of any mutation on the table "Grupa_Aut_Klienta"
"""
type Grupa_Aut_Klienta_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Grupa_Aut_Klienta!]!
}

"""
on conflict condition type for table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_on_conflict {
  constraint: Grupa_Aut_Klienta_constraint!
  update_columns: [Grupa_Aut_Klienta_update_column!]!
  where: Grupa_Aut_Klienta_bool_exp
}

"""Ordering options when selecting data from "Grupa_Aut_Klienta"."""
input Grupa_Aut_Klienta_order_by {
  Auto: Auto_order_by
  Klient: Klient_order_by
  created_at: order_by
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""primary key columns input for table: Grupa_Aut_Klienta"""
input Grupa_Aut_Klienta_pk_columns_input {
  id: Int!
}

"""
select columns of table "Grupa_Aut_Klienta"
"""
enum Grupa_Aut_Klienta_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_klient
}

"""
input type for updating data in table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_set_input {
  created_at: timestamptz
  id: Int
  id_auto: Int
  id_klient: Int
}

"""aggregate stddev on columns"""
type Grupa_Aut_Klienta_stddev_fields {
  id: Float
  id_auto: Float
  id_klient: Float
}

"""
order by stddev() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_stddev_order_by {
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""aggregate stddev_pop on columns"""
type Grupa_Aut_Klienta_stddev_pop_fields {
  id: Float
  id_auto: Float
  id_klient: Float
}

"""
order by stddev_pop() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""aggregate stddev_samp on columns"""
type Grupa_Aut_Klienta_stddev_samp_fields {
  id: Float
  id_auto: Float
  id_klient: Float
}

"""
order by stddev_samp() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""aggregate sum on columns"""
type Grupa_Aut_Klienta_sum_fields {
  id: Int
  id_auto: Int
  id_klient: Int
}

"""
order by sum() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_sum_order_by {
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""
update columns of table "Grupa_Aut_Klienta"
"""
enum Grupa_Aut_Klienta_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_klient
}

"""aggregate var_pop on columns"""
type Grupa_Aut_Klienta_var_pop_fields {
  id: Float
  id_auto: Float
  id_klient: Float
}

"""
order by var_pop() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_var_pop_order_by {
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""aggregate var_samp on columns"""
type Grupa_Aut_Klienta_var_samp_fields {
  id: Float
  id_auto: Float
  id_klient: Float
}

"""
order by var_samp() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_var_samp_order_by {
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""aggregate variance on columns"""
type Grupa_Aut_Klienta_variance_fields {
  id: Float
  id_auto: Float
  id_klient: Float
}

"""
order by variance() on columns of table "Grupa_Aut_Klienta"
"""
input Grupa_Aut_Klienta_variance_order_by {
  id: order_by
  id_auto: order_by
  id_klient: order_by
}

"""
columns and relationships of "Historia_Uzytkownik_Auto"
"""
type Historia_Uzytkownik_Auto {
  """An object relationship"""
  Auto: Auto!

  """An object relationship"""
  Uzytkownik: Uzytkownik!
  data_dodania_wlasciciela: date!
  data_oddania_auta: date
  id: Int!
  id_auto: Int!
  id_uzytkownik: Int!
}

"""
aggregated selection of "Historia_Uzytkownik_Auto"
"""
type Historia_Uzytkownik_Auto_aggregate {
  aggregate: Historia_Uzytkownik_Auto_aggregate_fields
  nodes: [Historia_Uzytkownik_Auto!]!
}

"""
aggregate fields of "Historia_Uzytkownik_Auto"
"""
type Historia_Uzytkownik_Auto_aggregate_fields {
  avg: Historia_Uzytkownik_Auto_avg_fields
  count(columns: [Historia_Uzytkownik_Auto_select_column!], distinct: Boolean): Int!
  max: Historia_Uzytkownik_Auto_max_fields
  min: Historia_Uzytkownik_Auto_min_fields
  stddev: Historia_Uzytkownik_Auto_stddev_fields
  stddev_pop: Historia_Uzytkownik_Auto_stddev_pop_fields
  stddev_samp: Historia_Uzytkownik_Auto_stddev_samp_fields
  sum: Historia_Uzytkownik_Auto_sum_fields
  var_pop: Historia_Uzytkownik_Auto_var_pop_fields
  var_samp: Historia_Uzytkownik_Auto_var_samp_fields
  variance: Historia_Uzytkownik_Auto_variance_fields
}

"""
order by aggregate values of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_aggregate_order_by {
  avg: Historia_Uzytkownik_Auto_avg_order_by
  count: order_by
  max: Historia_Uzytkownik_Auto_max_order_by
  min: Historia_Uzytkownik_Auto_min_order_by
  stddev: Historia_Uzytkownik_Auto_stddev_order_by
  stddev_pop: Historia_Uzytkownik_Auto_stddev_pop_order_by
  stddev_samp: Historia_Uzytkownik_Auto_stddev_samp_order_by
  sum: Historia_Uzytkownik_Auto_sum_order_by
  var_pop: Historia_Uzytkownik_Auto_var_pop_order_by
  var_samp: Historia_Uzytkownik_Auto_var_samp_order_by
  variance: Historia_Uzytkownik_Auto_variance_order_by
}

"""
input type for inserting array relation for remote table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_arr_rel_insert_input {
  data: [Historia_Uzytkownik_Auto_insert_input!]!

  """on conflict condition"""
  on_conflict: Historia_Uzytkownik_Auto_on_conflict
}

"""aggregate avg on columns"""
type Historia_Uzytkownik_Auto_avg_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
}

"""
order by avg() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_avg_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""
Boolean expression to filter rows from the table "Historia_Uzytkownik_Auto". All fields are combined with a logical 'AND'.
"""
input Historia_Uzytkownik_Auto_bool_exp {
  Auto: Auto_bool_exp
  Uzytkownik: Uzytkownik_bool_exp
  _and: [Historia_Uzytkownik_Auto_bool_exp!]
  _not: Historia_Uzytkownik_Auto_bool_exp
  _or: [Historia_Uzytkownik_Auto_bool_exp!]
  data_dodania_wlasciciela: date_comparison_exp
  data_oddania_auta: date_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  id_uzytkownik: Int_comparison_exp
}

"""
unique or primary key constraints on table "Historia_Uzytkownik_Auto"
"""
enum Historia_Uzytkownik_Auto_constraint {
  """unique or primary key constraint"""
  Historia_Uzytkownik_Auto_pkey
}

"""
input type for incrementing numeric columns in table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_inc_input {
  id: Int
  id_auto: Int
  id_uzytkownik: Int
}

"""
input type for inserting data into table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_insert_input {
  Auto: Auto_obj_rel_insert_input
  Uzytkownik: Uzytkownik_obj_rel_insert_input
  data_dodania_wlasciciela: date
  data_oddania_auta: date
  id: Int
  id_auto: Int
  id_uzytkownik: Int
}

"""aggregate max on columns"""
type Historia_Uzytkownik_Auto_max_fields {
  data_dodania_wlasciciela: date
  data_oddania_auta: date
  id: Int
  id_auto: Int
  id_uzytkownik: Int
}

"""
order by max() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_max_order_by {
  data_dodania_wlasciciela: order_by
  data_oddania_auta: order_by
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""aggregate min on columns"""
type Historia_Uzytkownik_Auto_min_fields {
  data_dodania_wlasciciela: date
  data_oddania_auta: date
  id: Int
  id_auto: Int
  id_uzytkownik: Int
}

"""
order by min() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_min_order_by {
  data_dodania_wlasciciela: order_by
  data_oddania_auta: order_by
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""
response of any mutation on the table "Historia_Uzytkownik_Auto"
"""
type Historia_Uzytkownik_Auto_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Historia_Uzytkownik_Auto!]!
}

"""
on conflict condition type for table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_on_conflict {
  constraint: Historia_Uzytkownik_Auto_constraint!
  update_columns: [Historia_Uzytkownik_Auto_update_column!]!
  where: Historia_Uzytkownik_Auto_bool_exp
}

"""Ordering options when selecting data from "Historia_Uzytkownik_Auto"."""
input Historia_Uzytkownik_Auto_order_by {
  Auto: Auto_order_by
  Uzytkownik: Uzytkownik_order_by
  data_dodania_wlasciciela: order_by
  data_oddania_auta: order_by
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""primary key columns input for table: Historia_Uzytkownik_Auto"""
input Historia_Uzytkownik_Auto_pk_columns_input {
  id: Int!
}

"""
select columns of table "Historia_Uzytkownik_Auto"
"""
enum Historia_Uzytkownik_Auto_select_column {
  """column name"""
  data_dodania_wlasciciela

  """column name"""
  data_oddania_auta

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_uzytkownik
}

"""
input type for updating data in table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_set_input {
  data_dodania_wlasciciela: date
  data_oddania_auta: date
  id: Int
  id_auto: Int
  id_uzytkownik: Int
}

"""aggregate stddev on columns"""
type Historia_Uzytkownik_Auto_stddev_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
}

"""
order by stddev() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_stddev_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""aggregate stddev_pop on columns"""
type Historia_Uzytkownik_Auto_stddev_pop_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
}

"""
order by stddev_pop() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""aggregate stddev_samp on columns"""
type Historia_Uzytkownik_Auto_stddev_samp_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
}

"""
order by stddev_samp() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""aggregate sum on columns"""
type Historia_Uzytkownik_Auto_sum_fields {
  id: Int
  id_auto: Int
  id_uzytkownik: Int
}

"""
order by sum() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_sum_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""
update columns of table "Historia_Uzytkownik_Auto"
"""
enum Historia_Uzytkownik_Auto_update_column {
  """column name"""
  data_dodania_wlasciciela

  """column name"""
  data_oddania_auta

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_uzytkownik
}

"""aggregate var_pop on columns"""
type Historia_Uzytkownik_Auto_var_pop_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
}

"""
order by var_pop() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_var_pop_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""aggregate var_samp on columns"""
type Historia_Uzytkownik_Auto_var_samp_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
}

"""
order by var_samp() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_var_samp_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""aggregate variance on columns"""
type Historia_Uzytkownik_Auto_variance_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
}

"""
order by variance() on columns of table "Historia_Uzytkownik_Auto"
"""
input Historia_Uzytkownik_Auto_variance_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
columns and relationships of "Karta_Orlen"
"""
type Karta_Orlen {
  """An object relationship"""
  Auto: Auto!
  data_waznosci: date!
  id: Int!
  id_auto: Int!
  pin: Int!
}

"""
aggregated selection of "Karta_Orlen"
"""
type Karta_Orlen_aggregate {
  aggregate: Karta_Orlen_aggregate_fields
  nodes: [Karta_Orlen!]!
}

"""
aggregate fields of "Karta_Orlen"
"""
type Karta_Orlen_aggregate_fields {
  avg: Karta_Orlen_avg_fields
  count(columns: [Karta_Orlen_select_column!], distinct: Boolean): Int!
  max: Karta_Orlen_max_fields
  min: Karta_Orlen_min_fields
  stddev: Karta_Orlen_stddev_fields
  stddev_pop: Karta_Orlen_stddev_pop_fields
  stddev_samp: Karta_Orlen_stddev_samp_fields
  sum: Karta_Orlen_sum_fields
  var_pop: Karta_Orlen_var_pop_fields
  var_samp: Karta_Orlen_var_samp_fields
  variance: Karta_Orlen_variance_fields
}

"""
order by aggregate values of table "Karta_Orlen"
"""
input Karta_Orlen_aggregate_order_by {
  avg: Karta_Orlen_avg_order_by
  count: order_by
  max: Karta_Orlen_max_order_by
  min: Karta_Orlen_min_order_by
  stddev: Karta_Orlen_stddev_order_by
  stddev_pop: Karta_Orlen_stddev_pop_order_by
  stddev_samp: Karta_Orlen_stddev_samp_order_by
  sum: Karta_Orlen_sum_order_by
  var_pop: Karta_Orlen_var_pop_order_by
  var_samp: Karta_Orlen_var_samp_order_by
  variance: Karta_Orlen_variance_order_by
}

"""
input type for inserting array relation for remote table "Karta_Orlen"
"""
input Karta_Orlen_arr_rel_insert_input {
  data: [Karta_Orlen_insert_input!]!

  """on conflict condition"""
  on_conflict: Karta_Orlen_on_conflict
}

"""aggregate avg on columns"""
type Karta_Orlen_avg_fields {
  id: Float
  id_auto: Float
  pin: Float
}

"""
order by avg() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_avg_order_by {
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""
Boolean expression to filter rows from the table "Karta_Orlen". All fields are combined with a logical 'AND'.
"""
input Karta_Orlen_bool_exp {
  Auto: Auto_bool_exp
  _and: [Karta_Orlen_bool_exp!]
  _not: Karta_Orlen_bool_exp
  _or: [Karta_Orlen_bool_exp!]
  data_waznosci: date_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  pin: Int_comparison_exp
}

"""
unique or primary key constraints on table "Karta_Orlen"
"""
enum Karta_Orlen_constraint {
  """unique or primary key constraint"""
  Karta_Orlen_pkey
}

"""
input type for incrementing numeric columns in table "Karta_Orlen"
"""
input Karta_Orlen_inc_input {
  id: Int
  id_auto: Int
  pin: Int
}

"""
input type for inserting data into table "Karta_Orlen"
"""
input Karta_Orlen_insert_input {
  Auto: Auto_obj_rel_insert_input
  data_waznosci: date
  id: Int
  id_auto: Int
  pin: Int
}

"""aggregate max on columns"""
type Karta_Orlen_max_fields {
  data_waznosci: date
  id: Int
  id_auto: Int
  pin: Int
}

"""
order by max() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_max_order_by {
  data_waznosci: order_by
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""aggregate min on columns"""
type Karta_Orlen_min_fields {
  data_waznosci: date
  id: Int
  id_auto: Int
  pin: Int
}

"""
order by min() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_min_order_by {
  data_waznosci: order_by
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""
response of any mutation on the table "Karta_Orlen"
"""
type Karta_Orlen_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Karta_Orlen!]!
}

"""
on conflict condition type for table "Karta_Orlen"
"""
input Karta_Orlen_on_conflict {
  constraint: Karta_Orlen_constraint!
  update_columns: [Karta_Orlen_update_column!]!
  where: Karta_Orlen_bool_exp
}

"""Ordering options when selecting data from "Karta_Orlen"."""
input Karta_Orlen_order_by {
  Auto: Auto_order_by
  data_waznosci: order_by
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""primary key columns input for table: Karta_Orlen"""
input Karta_Orlen_pk_columns_input {
  id: Int!
}

"""
select columns of table "Karta_Orlen"
"""
enum Karta_Orlen_select_column {
  """column name"""
  data_waznosci

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  pin
}

"""
input type for updating data in table "Karta_Orlen"
"""
input Karta_Orlen_set_input {
  data_waznosci: date
  id: Int
  id_auto: Int
  pin: Int
}

"""aggregate stddev on columns"""
type Karta_Orlen_stddev_fields {
  id: Float
  id_auto: Float
  pin: Float
}

"""
order by stddev() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_stddev_order_by {
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""aggregate stddev_pop on columns"""
type Karta_Orlen_stddev_pop_fields {
  id: Float
  id_auto: Float
  pin: Float
}

"""
order by stddev_pop() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""aggregate stddev_samp on columns"""
type Karta_Orlen_stddev_samp_fields {
  id: Float
  id_auto: Float
  pin: Float
}

"""
order by stddev_samp() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""aggregate sum on columns"""
type Karta_Orlen_sum_fields {
  id: Int
  id_auto: Int
  pin: Int
}

"""
order by sum() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_sum_order_by {
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""
update columns of table "Karta_Orlen"
"""
enum Karta_Orlen_update_column {
  """column name"""
  data_waznosci

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  pin
}

"""aggregate var_pop on columns"""
type Karta_Orlen_var_pop_fields {
  id: Float
  id_auto: Float
  pin: Float
}

"""
order by var_pop() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_var_pop_order_by {
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""aggregate var_samp on columns"""
type Karta_Orlen_var_samp_fields {
  id: Float
  id_auto: Float
  pin: Float
}

"""
order by var_samp() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_var_samp_order_by {
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""aggregate variance on columns"""
type Karta_Orlen_variance_fields {
  id: Float
  id_auto: Float
  pin: Float
}

"""
order by variance() on columns of table "Karta_Orlen"
"""
input Karta_Orlen_variance_order_by {
  id: order_by
  id_auto: order_by
  pin: order_by
}

"""
columns and relationships of "Klient"
"""
type Klient {
  """An array relationship"""
  Grupa_Aut_Klienta(
    """distinct select on columns"""
    distinct_on: [Grupa_Aut_Klienta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Grupa_Aut_Klienta_order_by!]

    """filter the rows returned"""
    where: Grupa_Aut_Klienta_bool_exp
  ): [Grupa_Aut_Klienta!]!

  """An aggregate relationship"""
  Grupa_Aut_Klienta_aggregate(
    """distinct select on columns"""
    distinct_on: [Grupa_Aut_Klienta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Grupa_Aut_Klienta_order_by!]

    """filter the rows returned"""
    where: Grupa_Aut_Klienta_bool_exp
  ): Grupa_Aut_Klienta_aggregate!
  id: Int!
  kontakt: String!
  nazwa: String!
}

"""
aggregated selection of "Klient"
"""
type Klient_aggregate {
  aggregate: Klient_aggregate_fields
  nodes: [Klient!]!
}

"""
aggregate fields of "Klient"
"""
type Klient_aggregate_fields {
  avg: Klient_avg_fields
  count(columns: [Klient_select_column!], distinct: Boolean): Int!
  max: Klient_max_fields
  min: Klient_min_fields
  stddev: Klient_stddev_fields
  stddev_pop: Klient_stddev_pop_fields
  stddev_samp: Klient_stddev_samp_fields
  sum: Klient_sum_fields
  var_pop: Klient_var_pop_fields
  var_samp: Klient_var_samp_fields
  variance: Klient_variance_fields
}

"""aggregate avg on columns"""
type Klient_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "Klient". All fields are combined with a logical 'AND'.
"""
input Klient_bool_exp {
  Grupa_Aut_Klienta: Grupa_Aut_Klienta_bool_exp
  _and: [Klient_bool_exp!]
  _not: Klient_bool_exp
  _or: [Klient_bool_exp!]
  id: Int_comparison_exp
  kontakt: String_comparison_exp
  nazwa: String_comparison_exp
}

"""
unique or primary key constraints on table "Klient"
"""
enum Klient_constraint {
  """unique or primary key constraint"""
  Klient_pkey
}

"""
input type for incrementing numeric columns in table "Klient"
"""
input Klient_inc_input {
  id: Int
}

"""
input type for inserting data into table "Klient"
"""
input Klient_insert_input {
  Grupa_Aut_Klienta: Grupa_Aut_Klienta_arr_rel_insert_input
  id: Int
  kontakt: String
  nazwa: String
}

"""aggregate max on columns"""
type Klient_max_fields {
  id: Int
  kontakt: String
  nazwa: String
}

"""aggregate min on columns"""
type Klient_min_fields {
  id: Int
  kontakt: String
  nazwa: String
}

"""
response of any mutation on the table "Klient"
"""
type Klient_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Klient!]!
}

"""
input type for inserting object relation for remote table "Klient"
"""
input Klient_obj_rel_insert_input {
  data: Klient_insert_input!

  """on conflict condition"""
  on_conflict: Klient_on_conflict
}

"""
on conflict condition type for table "Klient"
"""
input Klient_on_conflict {
  constraint: Klient_constraint!
  update_columns: [Klient_update_column!]!
  where: Klient_bool_exp
}

"""Ordering options when selecting data from "Klient"."""
input Klient_order_by {
  Grupa_Aut_Klienta_aggregate: Grupa_Aut_Klienta_aggregate_order_by
  id: order_by
  kontakt: order_by
  nazwa: order_by
}

"""primary key columns input for table: Klient"""
input Klient_pk_columns_input {
  id: Int!
}

"""
select columns of table "Klient"
"""
enum Klient_select_column {
  """column name"""
  id

  """column name"""
  kontakt

  """column name"""
  nazwa
}

"""
input type for updating data in table "Klient"
"""
input Klient_set_input {
  id: Int
  kontakt: String
  nazwa: String
}

"""aggregate stddev on columns"""
type Klient_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type Klient_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type Klient_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type Klient_sum_fields {
  id: Int
}

"""
update columns of table "Klient"
"""
enum Klient_update_column {
  """column name"""
  id

  """column name"""
  kontakt

  """column name"""
  nazwa
}

"""aggregate var_pop on columns"""
type Klient_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type Klient_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type Klient_variance_fields {
  id: Float
}

"""
columns and relationships of "Leasing"
"""
type Leasing {
  """An object relationship"""
  Auto: Auto!
  data_zakonczenia: date!
  data_zawarcia_umowy: date!
  id: Int!
  id_auto: Int!
  nr_umowy_leasingu: String!
  okres_trwania_w_miesiacach: Int!
}

"""
aggregated selection of "Leasing"
"""
type Leasing_aggregate {
  aggregate: Leasing_aggregate_fields
  nodes: [Leasing!]!
}

"""
aggregate fields of "Leasing"
"""
type Leasing_aggregate_fields {
  avg: Leasing_avg_fields
  count(columns: [Leasing_select_column!], distinct: Boolean): Int!
  max: Leasing_max_fields
  min: Leasing_min_fields
  stddev: Leasing_stddev_fields
  stddev_pop: Leasing_stddev_pop_fields
  stddev_samp: Leasing_stddev_samp_fields
  sum: Leasing_sum_fields
  var_pop: Leasing_var_pop_fields
  var_samp: Leasing_var_samp_fields
  variance: Leasing_variance_fields
}

"""
order by aggregate values of table "Leasing"
"""
input Leasing_aggregate_order_by {
  avg: Leasing_avg_order_by
  count: order_by
  max: Leasing_max_order_by
  min: Leasing_min_order_by
  stddev: Leasing_stddev_order_by
  stddev_pop: Leasing_stddev_pop_order_by
  stddev_samp: Leasing_stddev_samp_order_by
  sum: Leasing_sum_order_by
  var_pop: Leasing_var_pop_order_by
  var_samp: Leasing_var_samp_order_by
  variance: Leasing_variance_order_by
}

"""
input type for inserting array relation for remote table "Leasing"
"""
input Leasing_arr_rel_insert_input {
  data: [Leasing_insert_input!]!

  """on conflict condition"""
  on_conflict: Leasing_on_conflict
}

"""aggregate avg on columns"""
type Leasing_avg_fields {
  id: Float
  id_auto: Float
  okres_trwania_w_miesiacach: Float
}

"""
order by avg() on columns of table "Leasing"
"""
input Leasing_avg_order_by {
  id: order_by
  id_auto: order_by
  okres_trwania_w_miesiacach: order_by
}

"""
Boolean expression to filter rows from the table "Leasing". All fields are combined with a logical 'AND'.
"""
input Leasing_bool_exp {
  Auto: Auto_bool_exp
  _and: [Leasing_bool_exp!]
  _not: Leasing_bool_exp
  _or: [Leasing_bool_exp!]
  data_zakonczenia: date_comparison_exp
  data_zawarcia_umowy: date_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  nr_umowy_leasingu: String_comparison_exp
  okres_trwania_w_miesiacach: Int_comparison_exp
}

"""
unique or primary key constraints on table "Leasing"
"""
enum Leasing_constraint {
  """unique or primary key constraint"""
  Leasing_pkey
}

"""
input type for incrementing numeric columns in table "Leasing"
"""
input Leasing_inc_input {
  id: Int
  id_auto: Int
  okres_trwania_w_miesiacach: Int
}

"""
input type for inserting data into table "Leasing"
"""
input Leasing_insert_input {
  Auto: Auto_obj_rel_insert_input
  data_zakonczenia: date
  data_zawarcia_umowy: date
  id: Int
  id_auto: Int
  nr_umowy_leasingu: String
  okres_trwania_w_miesiacach: Int
}

"""aggregate max on columns"""
type Leasing_max_fields {
  data_zakonczenia: date
  data_zawarcia_umowy: date
  id: Int
  id_auto: Int
  nr_umowy_leasingu: String
  okres_trwania_w_miesiacach: Int
}

"""
order by max() on columns of table "Leasing"
"""
input Leasing_max_order_by {
  data_zakonczenia: order_by
  data_zawarcia_umowy: order_by
  id: order_by
  id_auto: order_by
  nr_umowy_leasingu: order_by
  okres_trwania_w_miesiacach: order_by
}

"""aggregate min on columns"""
type Leasing_min_fields {
  data_zakonczenia: date
  data_zawarcia_umowy: date
  id: Int
  id_auto: Int
  nr_umowy_leasingu: String
  okres_trwania_w_miesiacach: Int
}

"""
order by min() on columns of table "Leasing"
"""
input Leasing_min_order_by {
  data_zakonczenia: order_by
  data_zawarcia_umowy: order_by
  id: order_by
  id_auto: order_by
  nr_umowy_leasingu: order_by
  okres_trwania_w_miesiacach: order_by
}

"""
response of any mutation on the table "Leasing"
"""
type Leasing_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Leasing!]!
}

"""
on conflict condition type for table "Leasing"
"""
input Leasing_on_conflict {
  constraint: Leasing_constraint!
  update_columns: [Leasing_update_column!]!
  where: Leasing_bool_exp
}

"""Ordering options when selecting data from "Leasing"."""
input Leasing_order_by {
  Auto: Auto_order_by
  data_zakonczenia: order_by
  data_zawarcia_umowy: order_by
  id: order_by
  id_auto: order_by
  nr_umowy_leasingu: order_by
  okres_trwania_w_miesiacach: order_by
}

"""primary key columns input for table: Leasing"""
input Leasing_pk_columns_input {
  id: Int!
}

"""
select columns of table "Leasing"
"""
enum Leasing_select_column {
  """column name"""
  data_zakonczenia

  """column name"""
  data_zawarcia_umowy

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  nr_umowy_leasingu

  """column name"""
  okres_trwania_w_miesiacach
}

"""
input type for updating data in table "Leasing"
"""
input Leasing_set_input {
  data_zakonczenia: date
  data_zawarcia_umowy: date
  id: Int
  id_auto: Int
  nr_umowy_leasingu: String
  okres_trwania_w_miesiacach: Int
}

"""aggregate stddev on columns"""
type Leasing_stddev_fields {
  id: Float
  id_auto: Float
  okres_trwania_w_miesiacach: Float
}

"""
order by stddev() on columns of table "Leasing"
"""
input Leasing_stddev_order_by {
  id: order_by
  id_auto: order_by
  okres_trwania_w_miesiacach: order_by
}

"""aggregate stddev_pop on columns"""
type Leasing_stddev_pop_fields {
  id: Float
  id_auto: Float
  okres_trwania_w_miesiacach: Float
}

"""
order by stddev_pop() on columns of table "Leasing"
"""
input Leasing_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  okres_trwania_w_miesiacach: order_by
}

"""aggregate stddev_samp on columns"""
type Leasing_stddev_samp_fields {
  id: Float
  id_auto: Float
  okres_trwania_w_miesiacach: Float
}

"""
order by stddev_samp() on columns of table "Leasing"
"""
input Leasing_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  okres_trwania_w_miesiacach: order_by
}

"""aggregate sum on columns"""
type Leasing_sum_fields {
  id: Int
  id_auto: Int
  okres_trwania_w_miesiacach: Int
}

"""
order by sum() on columns of table "Leasing"
"""
input Leasing_sum_order_by {
  id: order_by
  id_auto: order_by
  okres_trwania_w_miesiacach: order_by
}

"""
update columns of table "Leasing"
"""
enum Leasing_update_column {
  """column name"""
  data_zakonczenia

  """column name"""
  data_zawarcia_umowy

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  nr_umowy_leasingu

  """column name"""
  okres_trwania_w_miesiacach
}

"""aggregate var_pop on columns"""
type Leasing_var_pop_fields {
  id: Float
  id_auto: Float
  okres_trwania_w_miesiacach: Float
}

"""
order by var_pop() on columns of table "Leasing"
"""
input Leasing_var_pop_order_by {
  id: order_by
  id_auto: order_by
  okres_trwania_w_miesiacach: order_by
}

"""aggregate var_samp on columns"""
type Leasing_var_samp_fields {
  id: Float
  id_auto: Float
  okres_trwania_w_miesiacach: Float
}

"""
order by var_samp() on columns of table "Leasing"
"""
input Leasing_var_samp_order_by {
  id: order_by
  id_auto: order_by
  okres_trwania_w_miesiacach: order_by
}

"""aggregate variance on columns"""
type Leasing_variance_fields {
  id: Float
  id_auto: Float
  okres_trwania_w_miesiacach: Float
}

"""
order by variance() on columns of table "Leasing"
"""
input Leasing_variance_order_by {
  id: order_by
  id_auto: order_by
  okres_trwania_w_miesiacach: order_by
}

"""
columns and relationships of "Mandat"
"""
type Mandat {
  """An object relationship"""
  Auto: Auto!

  """An object relationship"""
  Uzytkownik: Uzytkownik!
  data_odpowiedzi: date!
  data_otrzymania: date!
  data_pisma: date!
  data_zdarzenia: date!
  dzialanie: String!
  id: Int!
  id_auto: Int!
  id_uzytkownik: Int!
  nadawca: String!
  nr_sprawy: String!
  obciazenie_za_mandat: Int!
  platnosc: Int!
  wysokosc_mandatu: Int!
}

"""
aggregated selection of "Mandat"
"""
type Mandat_aggregate {
  aggregate: Mandat_aggregate_fields
  nodes: [Mandat!]!
}

"""
aggregate fields of "Mandat"
"""
type Mandat_aggregate_fields {
  avg: Mandat_avg_fields
  count(columns: [Mandat_select_column!], distinct: Boolean): Int!
  max: Mandat_max_fields
  min: Mandat_min_fields
  stddev: Mandat_stddev_fields
  stddev_pop: Mandat_stddev_pop_fields
  stddev_samp: Mandat_stddev_samp_fields
  sum: Mandat_sum_fields
  var_pop: Mandat_var_pop_fields
  var_samp: Mandat_var_samp_fields
  variance: Mandat_variance_fields
}

"""
order by aggregate values of table "Mandat"
"""
input Mandat_aggregate_order_by {
  avg: Mandat_avg_order_by
  count: order_by
  max: Mandat_max_order_by
  min: Mandat_min_order_by
  stddev: Mandat_stddev_order_by
  stddev_pop: Mandat_stddev_pop_order_by
  stddev_samp: Mandat_stddev_samp_order_by
  sum: Mandat_sum_order_by
  var_pop: Mandat_var_pop_order_by
  var_samp: Mandat_var_samp_order_by
  variance: Mandat_variance_order_by
}

"""
input type for inserting array relation for remote table "Mandat"
"""
input Mandat_arr_rel_insert_input {
  data: [Mandat_insert_input!]!

  """on conflict condition"""
  on_conflict: Mandat_on_conflict
}

"""aggregate avg on columns"""
type Mandat_avg_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
  obciazenie_za_mandat: Float
  platnosc: Float
  wysokosc_mandatu: Float
}

"""
order by avg() on columns of table "Mandat"
"""
input Mandat_avg_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""
Boolean expression to filter rows from the table "Mandat". All fields are combined with a logical 'AND'.
"""
input Mandat_bool_exp {
  Auto: Auto_bool_exp
  Uzytkownik: Uzytkownik_bool_exp
  _and: [Mandat_bool_exp!]
  _not: Mandat_bool_exp
  _or: [Mandat_bool_exp!]
  data_odpowiedzi: date_comparison_exp
  data_otrzymania: date_comparison_exp
  data_pisma: date_comparison_exp
  data_zdarzenia: date_comparison_exp
  dzialanie: String_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  id_uzytkownik: Int_comparison_exp
  nadawca: String_comparison_exp
  nr_sprawy: String_comparison_exp
  obciazenie_za_mandat: Int_comparison_exp
  platnosc: Int_comparison_exp
  wysokosc_mandatu: Int_comparison_exp
}

"""
unique or primary key constraints on table "Mandat"
"""
enum Mandat_constraint {
  """unique or primary key constraint"""
  Mandat_pkey
}

"""
input type for incrementing numeric columns in table "Mandat"
"""
input Mandat_inc_input {
  id: Int
  id_auto: Int
  id_uzytkownik: Int
  obciazenie_za_mandat: Int
  platnosc: Int
  wysokosc_mandatu: Int
}

"""
input type for inserting data into table "Mandat"
"""
input Mandat_insert_input {
  Auto: Auto_obj_rel_insert_input
  Uzytkownik: Uzytkownik_obj_rel_insert_input
  data_odpowiedzi: date
  data_otrzymania: date
  data_pisma: date
  data_zdarzenia: date
  dzialanie: String
  id: Int
  id_auto: Int
  id_uzytkownik: Int
  nadawca: String
  nr_sprawy: String
  obciazenie_za_mandat: Int
  platnosc: Int
  wysokosc_mandatu: Int
}

"""aggregate max on columns"""
type Mandat_max_fields {
  data_odpowiedzi: date
  data_otrzymania: date
  data_pisma: date
  data_zdarzenia: date
  dzialanie: String
  id: Int
  id_auto: Int
  id_uzytkownik: Int
  nadawca: String
  nr_sprawy: String
  obciazenie_za_mandat: Int
  platnosc: Int
  wysokosc_mandatu: Int
}

"""
order by max() on columns of table "Mandat"
"""
input Mandat_max_order_by {
  data_odpowiedzi: order_by
  data_otrzymania: order_by
  data_pisma: order_by
  data_zdarzenia: order_by
  dzialanie: order_by
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  nadawca: order_by
  nr_sprawy: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""aggregate min on columns"""
type Mandat_min_fields {
  data_odpowiedzi: date
  data_otrzymania: date
  data_pisma: date
  data_zdarzenia: date
  dzialanie: String
  id: Int
  id_auto: Int
  id_uzytkownik: Int
  nadawca: String
  nr_sprawy: String
  obciazenie_za_mandat: Int
  platnosc: Int
  wysokosc_mandatu: Int
}

"""
order by min() on columns of table "Mandat"
"""
input Mandat_min_order_by {
  data_odpowiedzi: order_by
  data_otrzymania: order_by
  data_pisma: order_by
  data_zdarzenia: order_by
  dzialanie: order_by
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  nadawca: order_by
  nr_sprawy: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""
response of any mutation on the table "Mandat"
"""
type Mandat_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Mandat!]!
}

"""
on conflict condition type for table "Mandat"
"""
input Mandat_on_conflict {
  constraint: Mandat_constraint!
  update_columns: [Mandat_update_column!]!
  where: Mandat_bool_exp
}

"""Ordering options when selecting data from "Mandat"."""
input Mandat_order_by {
  Auto: Auto_order_by
  Uzytkownik: Uzytkownik_order_by
  data_odpowiedzi: order_by
  data_otrzymania: order_by
  data_pisma: order_by
  data_zdarzenia: order_by
  dzialanie: order_by
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  nadawca: order_by
  nr_sprawy: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""primary key columns input for table: Mandat"""
input Mandat_pk_columns_input {
  id: Int!
}

"""
select columns of table "Mandat"
"""
enum Mandat_select_column {
  """column name"""
  data_odpowiedzi

  """column name"""
  data_otrzymania

  """column name"""
  data_pisma

  """column name"""
  data_zdarzenia

  """column name"""
  dzialanie

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_uzytkownik

  """column name"""
  nadawca

  """column name"""
  nr_sprawy

  """column name"""
  obciazenie_za_mandat

  """column name"""
  platnosc

  """column name"""
  wysokosc_mandatu
}

"""
input type for updating data in table "Mandat"
"""
input Mandat_set_input {
  data_odpowiedzi: date
  data_otrzymania: date
  data_pisma: date
  data_zdarzenia: date
  dzialanie: String
  id: Int
  id_auto: Int
  id_uzytkownik: Int
  nadawca: String
  nr_sprawy: String
  obciazenie_za_mandat: Int
  platnosc: Int
  wysokosc_mandatu: Int
}

"""aggregate stddev on columns"""
type Mandat_stddev_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
  obciazenie_za_mandat: Float
  platnosc: Float
  wysokosc_mandatu: Float
}

"""
order by stddev() on columns of table "Mandat"
"""
input Mandat_stddev_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""aggregate stddev_pop on columns"""
type Mandat_stddev_pop_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
  obciazenie_za_mandat: Float
  platnosc: Float
  wysokosc_mandatu: Float
}

"""
order by stddev_pop() on columns of table "Mandat"
"""
input Mandat_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""aggregate stddev_samp on columns"""
type Mandat_stddev_samp_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
  obciazenie_za_mandat: Float
  platnosc: Float
  wysokosc_mandatu: Float
}

"""
order by stddev_samp() on columns of table "Mandat"
"""
input Mandat_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""aggregate sum on columns"""
type Mandat_sum_fields {
  id: Int
  id_auto: Int
  id_uzytkownik: Int
  obciazenie_za_mandat: Int
  platnosc: Int
  wysokosc_mandatu: Int
}

"""
order by sum() on columns of table "Mandat"
"""
input Mandat_sum_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""
update columns of table "Mandat"
"""
enum Mandat_update_column {
  """column name"""
  data_odpowiedzi

  """column name"""
  data_otrzymania

  """column name"""
  data_pisma

  """column name"""
  data_zdarzenia

  """column name"""
  dzialanie

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_uzytkownik

  """column name"""
  nadawca

  """column name"""
  nr_sprawy

  """column name"""
  obciazenie_za_mandat

  """column name"""
  platnosc

  """column name"""
  wysokosc_mandatu
}

"""aggregate var_pop on columns"""
type Mandat_var_pop_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
  obciazenie_za_mandat: Float
  platnosc: Float
  wysokosc_mandatu: Float
}

"""
order by var_pop() on columns of table "Mandat"
"""
input Mandat_var_pop_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""aggregate var_samp on columns"""
type Mandat_var_samp_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
  obciazenie_za_mandat: Float
  platnosc: Float
  wysokosc_mandatu: Float
}

"""
order by var_samp() on columns of table "Mandat"
"""
input Mandat_var_samp_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""aggregate variance on columns"""
type Mandat_variance_fields {
  id: Float
  id_auto: Float
  id_uzytkownik: Float
  obciazenie_za_mandat: Float
  platnosc: Float
  wysokosc_mandatu: Float
}

"""
order by variance() on columns of table "Mandat"
"""
input Mandat_variance_order_by {
  id: order_by
  id_auto: order_by
  id_uzytkownik: order_by
  obciazenie_za_mandat: order_by
  platnosc: order_by
  wysokosc_mandatu: order_by
}

"""
columns and relationships of "Opona"
"""
type Opona {
  """An object relationship"""
  Auto: Auto!

  """An object relationship"""
  Typy_Opon: Typy_Opon!
  data_zakupu: date!
  detale: String!
  firma: String!
  id: Int!
  id_auto: Int!
  id_typy_opon: Int!
  koszt: Int!
  rozmiar: String!
}

"""
aggregated selection of "Opona"
"""
type Opona_aggregate {
  aggregate: Opona_aggregate_fields
  nodes: [Opona!]!
}

"""
aggregate fields of "Opona"
"""
type Opona_aggregate_fields {
  avg: Opona_avg_fields
  count(columns: [Opona_select_column!], distinct: Boolean): Int!
  max: Opona_max_fields
  min: Opona_min_fields
  stddev: Opona_stddev_fields
  stddev_pop: Opona_stddev_pop_fields
  stddev_samp: Opona_stddev_samp_fields
  sum: Opona_sum_fields
  var_pop: Opona_var_pop_fields
  var_samp: Opona_var_samp_fields
  variance: Opona_variance_fields
}

"""
order by aggregate values of table "Opona"
"""
input Opona_aggregate_order_by {
  avg: Opona_avg_order_by
  count: order_by
  max: Opona_max_order_by
  min: Opona_min_order_by
  stddev: Opona_stddev_order_by
  stddev_pop: Opona_stddev_pop_order_by
  stddev_samp: Opona_stddev_samp_order_by
  sum: Opona_sum_order_by
  var_pop: Opona_var_pop_order_by
  var_samp: Opona_var_samp_order_by
  variance: Opona_variance_order_by
}

"""
input type for inserting array relation for remote table "Opona"
"""
input Opona_arr_rel_insert_input {
  data: [Opona_insert_input!]!

  """on conflict condition"""
  on_conflict: Opona_on_conflict
}

"""aggregate avg on columns"""
type Opona_avg_fields {
  id: Float
  id_auto: Float
  id_typy_opon: Float
  koszt: Float
}

"""
order by avg() on columns of table "Opona"
"""
input Opona_avg_order_by {
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
}

"""
Boolean expression to filter rows from the table "Opona". All fields are combined with a logical 'AND'.
"""
input Opona_bool_exp {
  Auto: Auto_bool_exp
  Typy_Opon: Typy_Opon_bool_exp
  _and: [Opona_bool_exp!]
  _not: Opona_bool_exp
  _or: [Opona_bool_exp!]
  data_zakupu: date_comparison_exp
  detale: String_comparison_exp
  firma: String_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  id_typy_opon: Int_comparison_exp
  koszt: Int_comparison_exp
  rozmiar: String_comparison_exp
}

"""
unique or primary key constraints on table "Opona"
"""
enum Opona_constraint {
  """unique or primary key constraint"""
  Opona_pkey
}

"""
input type for incrementing numeric columns in table "Opona"
"""
input Opona_inc_input {
  id: Int
  id_auto: Int
  id_typy_opon: Int
  koszt: Int
}

"""
input type for inserting data into table "Opona"
"""
input Opona_insert_input {
  Auto: Auto_obj_rel_insert_input
  Typy_Opon: Typy_Opon_obj_rel_insert_input
  data_zakupu: date
  detale: String
  firma: String
  id: Int
  id_auto: Int
  id_typy_opon: Int
  koszt: Int
  rozmiar: String
}

"""aggregate max on columns"""
type Opona_max_fields {
  data_zakupu: date
  detale: String
  firma: String
  id: Int
  id_auto: Int
  id_typy_opon: Int
  koszt: Int
  rozmiar: String
}

"""
order by max() on columns of table "Opona"
"""
input Opona_max_order_by {
  data_zakupu: order_by
  detale: order_by
  firma: order_by
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
  rozmiar: order_by
}

"""aggregate min on columns"""
type Opona_min_fields {
  data_zakupu: date
  detale: String
  firma: String
  id: Int
  id_auto: Int
  id_typy_opon: Int
  koszt: Int
  rozmiar: String
}

"""
order by min() on columns of table "Opona"
"""
input Opona_min_order_by {
  data_zakupu: order_by
  detale: order_by
  firma: order_by
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
  rozmiar: order_by
}

"""
response of any mutation on the table "Opona"
"""
type Opona_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Opona!]!
}

"""
on conflict condition type for table "Opona"
"""
input Opona_on_conflict {
  constraint: Opona_constraint!
  update_columns: [Opona_update_column!]!
  where: Opona_bool_exp
}

"""Ordering options when selecting data from "Opona"."""
input Opona_order_by {
  Auto: Auto_order_by
  Typy_Opon: Typy_Opon_order_by
  data_zakupu: order_by
  detale: order_by
  firma: order_by
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
  rozmiar: order_by
}

"""primary key columns input for table: Opona"""
input Opona_pk_columns_input {
  id: Int!
}

"""
select columns of table "Opona"
"""
enum Opona_select_column {
  """column name"""
  data_zakupu

  """column name"""
  detale

  """column name"""
  firma

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_typy_opon

  """column name"""
  koszt

  """column name"""
  rozmiar
}

"""
input type for updating data in table "Opona"
"""
input Opona_set_input {
  data_zakupu: date
  detale: String
  firma: String
  id: Int
  id_auto: Int
  id_typy_opon: Int
  koszt: Int
  rozmiar: String
}

"""aggregate stddev on columns"""
type Opona_stddev_fields {
  id: Float
  id_auto: Float
  id_typy_opon: Float
  koszt: Float
}

"""
order by stddev() on columns of table "Opona"
"""
input Opona_stddev_order_by {
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
}

"""aggregate stddev_pop on columns"""
type Opona_stddev_pop_fields {
  id: Float
  id_auto: Float
  id_typy_opon: Float
  koszt: Float
}

"""
order by stddev_pop() on columns of table "Opona"
"""
input Opona_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
}

"""aggregate stddev_samp on columns"""
type Opona_stddev_samp_fields {
  id: Float
  id_auto: Float
  id_typy_opon: Float
  koszt: Float
}

"""
order by stddev_samp() on columns of table "Opona"
"""
input Opona_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
}

"""aggregate sum on columns"""
type Opona_sum_fields {
  id: Int
  id_auto: Int
  id_typy_opon: Int
  koszt: Int
}

"""
order by sum() on columns of table "Opona"
"""
input Opona_sum_order_by {
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
}

"""
update columns of table "Opona"
"""
enum Opona_update_column {
  """column name"""
  data_zakupu

  """column name"""
  detale

  """column name"""
  firma

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_typy_opon

  """column name"""
  koszt

  """column name"""
  rozmiar
}

"""aggregate var_pop on columns"""
type Opona_var_pop_fields {
  id: Float
  id_auto: Float
  id_typy_opon: Float
  koszt: Float
}

"""
order by var_pop() on columns of table "Opona"
"""
input Opona_var_pop_order_by {
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
}

"""aggregate var_samp on columns"""
type Opona_var_samp_fields {
  id: Float
  id_auto: Float
  id_typy_opon: Float
  koszt: Float
}

"""
order by var_samp() on columns of table "Opona"
"""
input Opona_var_samp_order_by {
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
}

"""aggregate variance on columns"""
type Opona_variance_fields {
  id: Float
  id_auto: Float
  id_typy_opon: Float
  koszt: Float
}

"""
order by variance() on columns of table "Opona"
"""
input Opona_variance_order_by {
  id: order_by
  id_auto: order_by
  id_typy_opon: order_by
  koszt: order_by
}

"""
columns and relationships of "Polisa"
"""
type Polisa {
  """An object relationship"""
  Auto: Auto!
  ac_oc: String!
  data_rozpoczecia_polisy: date!
  id: Int!
  id_auto: Int!
  nr_polisy: String!
  ubezpieczyciel: String!
}

"""
aggregated selection of "Polisa"
"""
type Polisa_aggregate {
  aggregate: Polisa_aggregate_fields
  nodes: [Polisa!]!
}

"""
aggregate fields of "Polisa"
"""
type Polisa_aggregate_fields {
  avg: Polisa_avg_fields
  count(columns: [Polisa_select_column!], distinct: Boolean): Int!
  max: Polisa_max_fields
  min: Polisa_min_fields
  stddev: Polisa_stddev_fields
  stddev_pop: Polisa_stddev_pop_fields
  stddev_samp: Polisa_stddev_samp_fields
  sum: Polisa_sum_fields
  var_pop: Polisa_var_pop_fields
  var_samp: Polisa_var_samp_fields
  variance: Polisa_variance_fields
}

"""
order by aggregate values of table "Polisa"
"""
input Polisa_aggregate_order_by {
  avg: Polisa_avg_order_by
  count: order_by
  max: Polisa_max_order_by
  min: Polisa_min_order_by
  stddev: Polisa_stddev_order_by
  stddev_pop: Polisa_stddev_pop_order_by
  stddev_samp: Polisa_stddev_samp_order_by
  sum: Polisa_sum_order_by
  var_pop: Polisa_var_pop_order_by
  var_samp: Polisa_var_samp_order_by
  variance: Polisa_variance_order_by
}

"""
input type for inserting array relation for remote table "Polisa"
"""
input Polisa_arr_rel_insert_input {
  data: [Polisa_insert_input!]!

  """on conflict condition"""
  on_conflict: Polisa_on_conflict
}

"""aggregate avg on columns"""
type Polisa_avg_fields {
  id: Float
  id_auto: Float
}

"""
order by avg() on columns of table "Polisa"
"""
input Polisa_avg_order_by {
  id: order_by
  id_auto: order_by
}

"""
Boolean expression to filter rows from the table "Polisa". All fields are combined with a logical 'AND'.
"""
input Polisa_bool_exp {
  Auto: Auto_bool_exp
  _and: [Polisa_bool_exp!]
  _not: Polisa_bool_exp
  _or: [Polisa_bool_exp!]
  ac_oc: String_comparison_exp
  data_rozpoczecia_polisy: date_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  nr_polisy: String_comparison_exp
  ubezpieczyciel: String_comparison_exp
}

"""
unique or primary key constraints on table "Polisa"
"""
enum Polisa_constraint {
  """unique or primary key constraint"""
  Polisa_pkey
}

"""
input type for incrementing numeric columns in table "Polisa"
"""
input Polisa_inc_input {
  id: Int
  id_auto: Int
}

"""
input type for inserting data into table "Polisa"
"""
input Polisa_insert_input {
  Auto: Auto_obj_rel_insert_input
  ac_oc: String
  data_rozpoczecia_polisy: date
  id: Int
  id_auto: Int
  nr_polisy: String
  ubezpieczyciel: String
}

"""aggregate max on columns"""
type Polisa_max_fields {
  ac_oc: String
  data_rozpoczecia_polisy: date
  id: Int
  id_auto: Int
  nr_polisy: String
  ubezpieczyciel: String
}

"""
order by max() on columns of table "Polisa"
"""
input Polisa_max_order_by {
  ac_oc: order_by
  data_rozpoczecia_polisy: order_by
  id: order_by
  id_auto: order_by
  nr_polisy: order_by
  ubezpieczyciel: order_by
}

"""aggregate min on columns"""
type Polisa_min_fields {
  ac_oc: String
  data_rozpoczecia_polisy: date
  id: Int
  id_auto: Int
  nr_polisy: String
  ubezpieczyciel: String
}

"""
order by min() on columns of table "Polisa"
"""
input Polisa_min_order_by {
  ac_oc: order_by
  data_rozpoczecia_polisy: order_by
  id: order_by
  id_auto: order_by
  nr_polisy: order_by
  ubezpieczyciel: order_by
}

"""
response of any mutation on the table "Polisa"
"""
type Polisa_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Polisa!]!
}

"""
on conflict condition type for table "Polisa"
"""
input Polisa_on_conflict {
  constraint: Polisa_constraint!
  update_columns: [Polisa_update_column!]!
  where: Polisa_bool_exp
}

"""Ordering options when selecting data from "Polisa"."""
input Polisa_order_by {
  Auto: Auto_order_by
  ac_oc: order_by
  data_rozpoczecia_polisy: order_by
  id: order_by
  id_auto: order_by
  nr_polisy: order_by
  ubezpieczyciel: order_by
}

"""primary key columns input for table: Polisa"""
input Polisa_pk_columns_input {
  id: Int!
}

"""
select columns of table "Polisa"
"""
enum Polisa_select_column {
  """column name"""
  ac_oc

  """column name"""
  data_rozpoczecia_polisy

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  nr_polisy

  """column name"""
  ubezpieczyciel
}

"""
input type for updating data in table "Polisa"
"""
input Polisa_set_input {
  ac_oc: String
  data_rozpoczecia_polisy: date
  id: Int
  id_auto: Int
  nr_polisy: String
  ubezpieczyciel: String
}

"""aggregate stddev on columns"""
type Polisa_stddev_fields {
  id: Float
  id_auto: Float
}

"""
order by stddev() on columns of table "Polisa"
"""
input Polisa_stddev_order_by {
  id: order_by
  id_auto: order_by
}

"""aggregate stddev_pop on columns"""
type Polisa_stddev_pop_fields {
  id: Float
  id_auto: Float
}

"""
order by stddev_pop() on columns of table "Polisa"
"""
input Polisa_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
}

"""aggregate stddev_samp on columns"""
type Polisa_stddev_samp_fields {
  id: Float
  id_auto: Float
}

"""
order by stddev_samp() on columns of table "Polisa"
"""
input Polisa_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
}

"""aggregate sum on columns"""
type Polisa_sum_fields {
  id: Int
  id_auto: Int
}

"""
order by sum() on columns of table "Polisa"
"""
input Polisa_sum_order_by {
  id: order_by
  id_auto: order_by
}

"""
update columns of table "Polisa"
"""
enum Polisa_update_column {
  """column name"""
  ac_oc

  """column name"""
  data_rozpoczecia_polisy

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  nr_polisy

  """column name"""
  ubezpieczyciel
}

"""aggregate var_pop on columns"""
type Polisa_var_pop_fields {
  id: Float
  id_auto: Float
}

"""
order by var_pop() on columns of table "Polisa"
"""
input Polisa_var_pop_order_by {
  id: order_by
  id_auto: order_by
}

"""aggregate var_samp on columns"""
type Polisa_var_samp_fields {
  id: Float
  id_auto: Float
}

"""
order by var_samp() on columns of table "Polisa"
"""
input Polisa_var_samp_order_by {
  id: order_by
  id_auto: order_by
}

"""aggregate variance on columns"""
type Polisa_variance_fields {
  id: Float
  id_auto: Float
}

"""
order by variance() on columns of table "Polisa"
"""
input Polisa_variance_order_by {
  id: order_by
  id_auto: order_by
}

"""
columns and relationships of "Przebieg"
"""
type Przebieg {
  """An object relationship"""
  Auto: Auto!
  created_at: timestamptz!
  data_przebiegu: date!
  data_przegladu: date
  id: Int!
  id_auto: Int!
  przebieg: Int!
  przebieg_z_poczatku_miesiaca: Int
  updated_at: timestamptz!
}

"""
aggregated selection of "Przebieg"
"""
type Przebieg_aggregate {
  aggregate: Przebieg_aggregate_fields
  nodes: [Przebieg!]!
}

"""
aggregate fields of "Przebieg"
"""
type Przebieg_aggregate_fields {
  avg: Przebieg_avg_fields
  count(columns: [Przebieg_select_column!], distinct: Boolean): Int!
  max: Przebieg_max_fields
  min: Przebieg_min_fields
  stddev: Przebieg_stddev_fields
  stddev_pop: Przebieg_stddev_pop_fields
  stddev_samp: Przebieg_stddev_samp_fields
  sum: Przebieg_sum_fields
  var_pop: Przebieg_var_pop_fields
  var_samp: Przebieg_var_samp_fields
  variance: Przebieg_variance_fields
}

"""
order by aggregate values of table "Przebieg"
"""
input Przebieg_aggregate_order_by {
  avg: Przebieg_avg_order_by
  count: order_by
  max: Przebieg_max_order_by
  min: Przebieg_min_order_by
  stddev: Przebieg_stddev_order_by
  stddev_pop: Przebieg_stddev_pop_order_by
  stddev_samp: Przebieg_stddev_samp_order_by
  sum: Przebieg_sum_order_by
  var_pop: Przebieg_var_pop_order_by
  var_samp: Przebieg_var_samp_order_by
  variance: Przebieg_variance_order_by
}

"""
input type for inserting array relation for remote table "Przebieg"
"""
input Przebieg_arr_rel_insert_input {
  data: [Przebieg_insert_input!]!

  """on conflict condition"""
  on_conflict: Przebieg_on_conflict
}

"""aggregate avg on columns"""
type Przebieg_avg_fields {
  id: Float
  id_auto: Float
  przebieg: Float
  przebieg_z_poczatku_miesiaca: Float
}

"""
order by avg() on columns of table "Przebieg"
"""
input Przebieg_avg_order_by {
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
}

"""
Boolean expression to filter rows from the table "Przebieg". All fields are combined with a logical 'AND'.
"""
input Przebieg_bool_exp {
  Auto: Auto_bool_exp
  _and: [Przebieg_bool_exp!]
  _not: Przebieg_bool_exp
  _or: [Przebieg_bool_exp!]
  created_at: timestamptz_comparison_exp
  data_przebiegu: date_comparison_exp
  data_przegladu: date_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  przebieg: Int_comparison_exp
  przebieg_z_poczatku_miesiaca: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "Przebieg"
"""
enum Przebieg_constraint {
  """unique or primary key constraint"""
  Przebieg_pkey
}

"""
input type for incrementing numeric columns in table "Przebieg"
"""
input Przebieg_inc_input {
  id: Int
  id_auto: Int
  przebieg: Int
  przebieg_z_poczatku_miesiaca: Int
}

"""
input type for inserting data into table "Przebieg"
"""
input Przebieg_insert_input {
  Auto: Auto_obj_rel_insert_input
  created_at: timestamptz
  data_przebiegu: date
  data_przegladu: date
  id: Int
  id_auto: Int
  przebieg: Int
  przebieg_z_poczatku_miesiaca: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type Przebieg_max_fields {
  created_at: timestamptz
  data_przebiegu: date
  data_przegladu: date
  id: Int
  id_auto: Int
  przebieg: Int
  przebieg_z_poczatku_miesiaca: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "Przebieg"
"""
input Przebieg_max_order_by {
  created_at: order_by
  data_przebiegu: order_by
  data_przegladu: order_by
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type Przebieg_min_fields {
  created_at: timestamptz
  data_przebiegu: date
  data_przegladu: date
  id: Int
  id_auto: Int
  przebieg: Int
  przebieg_z_poczatku_miesiaca: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "Przebieg"
"""
input Przebieg_min_order_by {
  created_at: order_by
  data_przebiegu: order_by
  data_przegladu: order_by
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "Przebieg"
"""
type Przebieg_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Przebieg!]!
}

"""
on conflict condition type for table "Przebieg"
"""
input Przebieg_on_conflict {
  constraint: Przebieg_constraint!
  update_columns: [Przebieg_update_column!]!
  where: Przebieg_bool_exp
}

"""Ordering options when selecting data from "Przebieg"."""
input Przebieg_order_by {
  Auto: Auto_order_by
  created_at: order_by
  data_przebiegu: order_by
  data_przegladu: order_by
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
  updated_at: order_by
}

"""primary key columns input for table: Przebieg"""
input Przebieg_pk_columns_input {
  id: Int!
}

"""
select columns of table "Przebieg"
"""
enum Przebieg_select_column {
  """column name"""
  created_at

  """column name"""
  data_przebiegu

  """column name"""
  data_przegladu

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  przebieg

  """column name"""
  przebieg_z_poczatku_miesiaca

  """column name"""
  updated_at
}

"""
input type for updating data in table "Przebieg"
"""
input Przebieg_set_input {
  created_at: timestamptz
  data_przebiegu: date
  data_przegladu: date
  id: Int
  id_auto: Int
  przebieg: Int
  przebieg_z_poczatku_miesiaca: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type Przebieg_stddev_fields {
  id: Float
  id_auto: Float
  przebieg: Float
  przebieg_z_poczatku_miesiaca: Float
}

"""
order by stddev() on columns of table "Przebieg"
"""
input Przebieg_stddev_order_by {
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
}

"""aggregate stddev_pop on columns"""
type Przebieg_stddev_pop_fields {
  id: Float
  id_auto: Float
  przebieg: Float
  przebieg_z_poczatku_miesiaca: Float
}

"""
order by stddev_pop() on columns of table "Przebieg"
"""
input Przebieg_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
}

"""aggregate stddev_samp on columns"""
type Przebieg_stddev_samp_fields {
  id: Float
  id_auto: Float
  przebieg: Float
  przebieg_z_poczatku_miesiaca: Float
}

"""
order by stddev_samp() on columns of table "Przebieg"
"""
input Przebieg_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
}

"""aggregate sum on columns"""
type Przebieg_sum_fields {
  id: Int
  id_auto: Int
  przebieg: Int
  przebieg_z_poczatku_miesiaca: Int
}

"""
order by sum() on columns of table "Przebieg"
"""
input Przebieg_sum_order_by {
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
}

"""
update columns of table "Przebieg"
"""
enum Przebieg_update_column {
  """column name"""
  created_at

  """column name"""
  data_przebiegu

  """column name"""
  data_przegladu

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  przebieg

  """column name"""
  przebieg_z_poczatku_miesiaca

  """column name"""
  updated_at
}

"""aggregate var_pop on columns"""
type Przebieg_var_pop_fields {
  id: Float
  id_auto: Float
  przebieg: Float
  przebieg_z_poczatku_miesiaca: Float
}

"""
order by var_pop() on columns of table "Przebieg"
"""
input Przebieg_var_pop_order_by {
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
}

"""aggregate var_samp on columns"""
type Przebieg_var_samp_fields {
  id: Float
  id_auto: Float
  przebieg: Float
  przebieg_z_poczatku_miesiaca: Float
}

"""
order by var_samp() on columns of table "Przebieg"
"""
input Przebieg_var_samp_order_by {
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
}

"""aggregate variance on columns"""
type Przebieg_variance_fields {
  id: Float
  id_auto: Float
  przebieg: Float
  przebieg_z_poczatku_miesiaca: Float
}

"""
order by variance() on columns of table "Przebieg"
"""
input Przebieg_variance_order_by {
  id: order_by
  id_auto: order_by
  przebieg: order_by
  przebieg_z_poczatku_miesiaca: order_by
}

"""
columns and relationships of "Przeglad"
"""
type Przeglad {
  """An object relationship"""
  Auto: Auto!

  """An object relationship"""
  Przeglad_Koszta_Dodatkowe: Przeglad_Koszta_Dodatkowe!

  """An object relationship"""
  Przeglad_OT_Kilometry: Przeglad_OT_Kilometry!
  data_przegladu: date!
  id: Int!
  id_auto: Int!
  id_przeglad_koszta_dodatkowe: Int!
  id_przeglad_ot_kilometry: Int!
  is_wymiana_rozrzadu: Boolean!
}

"""
columns and relationships of "Przeglad_Koszta_Dodatkowe"
"""
type Przeglad_Koszta_Dodatkowe {
  """An array relationship"""
  Przeglads(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): [Przeglad!]!

  """An aggregate relationship"""
  Przeglads_aggregate(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): Przeglad_aggregate!
  id: Int!
  koszt_MacPhersona: Int
  koszt_hamulce: Int
  koszt_klimatyzacja: Int
  koszt_rozrzad: Int!
  koszt_sprzeglo: Int
}

"""
aggregated selection of "Przeglad_Koszta_Dodatkowe"
"""
type Przeglad_Koszta_Dodatkowe_aggregate {
  aggregate: Przeglad_Koszta_Dodatkowe_aggregate_fields
  nodes: [Przeglad_Koszta_Dodatkowe!]!
}

"""
aggregate fields of "Przeglad_Koszta_Dodatkowe"
"""
type Przeglad_Koszta_Dodatkowe_aggregate_fields {
  avg: Przeglad_Koszta_Dodatkowe_avg_fields
  count(columns: [Przeglad_Koszta_Dodatkowe_select_column!], distinct: Boolean): Int!
  max: Przeglad_Koszta_Dodatkowe_max_fields
  min: Przeglad_Koszta_Dodatkowe_min_fields
  stddev: Przeglad_Koszta_Dodatkowe_stddev_fields
  stddev_pop: Przeglad_Koszta_Dodatkowe_stddev_pop_fields
  stddev_samp: Przeglad_Koszta_Dodatkowe_stddev_samp_fields
  sum: Przeglad_Koszta_Dodatkowe_sum_fields
  var_pop: Przeglad_Koszta_Dodatkowe_var_pop_fields
  var_samp: Przeglad_Koszta_Dodatkowe_var_samp_fields
  variance: Przeglad_Koszta_Dodatkowe_variance_fields
}

"""aggregate avg on columns"""
type Przeglad_Koszta_Dodatkowe_avg_fields {
  id: Float
  koszt_MacPhersona: Float
  koszt_hamulce: Float
  koszt_klimatyzacja: Float
  koszt_rozrzad: Float
  koszt_sprzeglo: Float
}

"""
Boolean expression to filter rows from the table "Przeglad_Koszta_Dodatkowe". All fields are combined with a logical 'AND'.
"""
input Przeglad_Koszta_Dodatkowe_bool_exp {
  Przeglads: Przeglad_bool_exp
  _and: [Przeglad_Koszta_Dodatkowe_bool_exp!]
  _not: Przeglad_Koszta_Dodatkowe_bool_exp
  _or: [Przeglad_Koszta_Dodatkowe_bool_exp!]
  id: Int_comparison_exp
  koszt_MacPhersona: Int_comparison_exp
  koszt_hamulce: Int_comparison_exp
  koszt_klimatyzacja: Int_comparison_exp
  koszt_rozrzad: Int_comparison_exp
  koszt_sprzeglo: Int_comparison_exp
}

"""
unique or primary key constraints on table "Przeglad_Koszta_Dodatkowe"
"""
enum Przeglad_Koszta_Dodatkowe_constraint {
  """unique or primary key constraint"""
  Przeglad_Koszta_Dodatkowe_pkey
}

"""
input type for incrementing numeric columns in table "Przeglad_Koszta_Dodatkowe"
"""
input Przeglad_Koszta_Dodatkowe_inc_input {
  id: Int
  koszt_MacPhersona: Int
  koszt_hamulce: Int
  koszt_klimatyzacja: Int
  koszt_rozrzad: Int
  koszt_sprzeglo: Int
}

"""
input type for inserting data into table "Przeglad_Koszta_Dodatkowe"
"""
input Przeglad_Koszta_Dodatkowe_insert_input {
  Przeglads: Przeglad_arr_rel_insert_input
  id: Int
  koszt_MacPhersona: Int
  koszt_hamulce: Int
  koszt_klimatyzacja: Int
  koszt_rozrzad: Int
  koszt_sprzeglo: Int
}

"""aggregate max on columns"""
type Przeglad_Koszta_Dodatkowe_max_fields {
  id: Int
  koszt_MacPhersona: Int
  koszt_hamulce: Int
  koszt_klimatyzacja: Int
  koszt_rozrzad: Int
  koszt_sprzeglo: Int
}

"""aggregate min on columns"""
type Przeglad_Koszta_Dodatkowe_min_fields {
  id: Int
  koszt_MacPhersona: Int
  koszt_hamulce: Int
  koszt_klimatyzacja: Int
  koszt_rozrzad: Int
  koszt_sprzeglo: Int
}

"""
response of any mutation on the table "Przeglad_Koszta_Dodatkowe"
"""
type Przeglad_Koszta_Dodatkowe_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Przeglad_Koszta_Dodatkowe!]!
}

"""
input type for inserting object relation for remote table "Przeglad_Koszta_Dodatkowe"
"""
input Przeglad_Koszta_Dodatkowe_obj_rel_insert_input {
  data: Przeglad_Koszta_Dodatkowe_insert_input!

  """on conflict condition"""
  on_conflict: Przeglad_Koszta_Dodatkowe_on_conflict
}

"""
on conflict condition type for table "Przeglad_Koszta_Dodatkowe"
"""
input Przeglad_Koszta_Dodatkowe_on_conflict {
  constraint: Przeglad_Koszta_Dodatkowe_constraint!
  update_columns: [Przeglad_Koszta_Dodatkowe_update_column!]!
  where: Przeglad_Koszta_Dodatkowe_bool_exp
}

"""Ordering options when selecting data from "Przeglad_Koszta_Dodatkowe"."""
input Przeglad_Koszta_Dodatkowe_order_by {
  Przeglads_aggregate: Przeglad_aggregate_order_by
  id: order_by
  koszt_MacPhersona: order_by
  koszt_hamulce: order_by
  koszt_klimatyzacja: order_by
  koszt_rozrzad: order_by
  koszt_sprzeglo: order_by
}

"""primary key columns input for table: Przeglad_Koszta_Dodatkowe"""
input Przeglad_Koszta_Dodatkowe_pk_columns_input {
  id: Int!
}

"""
select columns of table "Przeglad_Koszta_Dodatkowe"
"""
enum Przeglad_Koszta_Dodatkowe_select_column {
  """column name"""
  id

  """column name"""
  koszt_MacPhersona

  """column name"""
  koszt_hamulce

  """column name"""
  koszt_klimatyzacja

  """column name"""
  koszt_rozrzad

  """column name"""
  koszt_sprzeglo
}

"""
input type for updating data in table "Przeglad_Koszta_Dodatkowe"
"""
input Przeglad_Koszta_Dodatkowe_set_input {
  id: Int
  koszt_MacPhersona: Int
  koszt_hamulce: Int
  koszt_klimatyzacja: Int
  koszt_rozrzad: Int
  koszt_sprzeglo: Int
}

"""aggregate stddev on columns"""
type Przeglad_Koszta_Dodatkowe_stddev_fields {
  id: Float
  koszt_MacPhersona: Float
  koszt_hamulce: Float
  koszt_klimatyzacja: Float
  koszt_rozrzad: Float
  koszt_sprzeglo: Float
}

"""aggregate stddev_pop on columns"""
type Przeglad_Koszta_Dodatkowe_stddev_pop_fields {
  id: Float
  koszt_MacPhersona: Float
  koszt_hamulce: Float
  koszt_klimatyzacja: Float
  koszt_rozrzad: Float
  koszt_sprzeglo: Float
}

"""aggregate stddev_samp on columns"""
type Przeglad_Koszta_Dodatkowe_stddev_samp_fields {
  id: Float
  koszt_MacPhersona: Float
  koszt_hamulce: Float
  koszt_klimatyzacja: Float
  koszt_rozrzad: Float
  koszt_sprzeglo: Float
}

"""aggregate sum on columns"""
type Przeglad_Koszta_Dodatkowe_sum_fields {
  id: Int
  koszt_MacPhersona: Int
  koszt_hamulce: Int
  koszt_klimatyzacja: Int
  koszt_rozrzad: Int
  koszt_sprzeglo: Int
}

"""
update columns of table "Przeglad_Koszta_Dodatkowe"
"""
enum Przeglad_Koszta_Dodatkowe_update_column {
  """column name"""
  id

  """column name"""
  koszt_MacPhersona

  """column name"""
  koszt_hamulce

  """column name"""
  koszt_klimatyzacja

  """column name"""
  koszt_rozrzad

  """column name"""
  koszt_sprzeglo
}

"""aggregate var_pop on columns"""
type Przeglad_Koszta_Dodatkowe_var_pop_fields {
  id: Float
  koszt_MacPhersona: Float
  koszt_hamulce: Float
  koszt_klimatyzacja: Float
  koszt_rozrzad: Float
  koszt_sprzeglo: Float
}

"""aggregate var_samp on columns"""
type Przeglad_Koszta_Dodatkowe_var_samp_fields {
  id: Float
  koszt_MacPhersona: Float
  koszt_hamulce: Float
  koszt_klimatyzacja: Float
  koszt_rozrzad: Float
  koszt_sprzeglo: Float
}

"""aggregate variance on columns"""
type Przeglad_Koszta_Dodatkowe_variance_fields {
  id: Float
  koszt_MacPhersona: Float
  koszt_hamulce: Float
  koszt_klimatyzacja: Float
  koszt_rozrzad: Float
  koszt_sprzeglo: Float
}

"""
columns and relationships of "Przeglad_OT_Kilometry"
"""
type Przeglad_OT_Kilometry {
  """An array relationship"""
  Przeglads(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): [Przeglad!]!

  """An aggregate relationship"""
  Przeglads_aggregate(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): Przeglad_aggregate!
  id: Int!
  ilosc_kilometrow_w_tysiacach: Int!
}

"""
aggregated selection of "Przeglad_OT_Kilometry"
"""
type Przeglad_OT_Kilometry_aggregate {
  aggregate: Przeglad_OT_Kilometry_aggregate_fields
  nodes: [Przeglad_OT_Kilometry!]!
}

"""
aggregate fields of "Przeglad_OT_Kilometry"
"""
type Przeglad_OT_Kilometry_aggregate_fields {
  avg: Przeglad_OT_Kilometry_avg_fields
  count(columns: [Przeglad_OT_Kilometry_select_column!], distinct: Boolean): Int!
  max: Przeglad_OT_Kilometry_max_fields
  min: Przeglad_OT_Kilometry_min_fields
  stddev: Przeglad_OT_Kilometry_stddev_fields
  stddev_pop: Przeglad_OT_Kilometry_stddev_pop_fields
  stddev_samp: Przeglad_OT_Kilometry_stddev_samp_fields
  sum: Przeglad_OT_Kilometry_sum_fields
  var_pop: Przeglad_OT_Kilometry_var_pop_fields
  var_samp: Przeglad_OT_Kilometry_var_samp_fields
  variance: Przeglad_OT_Kilometry_variance_fields
}

"""aggregate avg on columns"""
type Przeglad_OT_Kilometry_avg_fields {
  id: Float
  ilosc_kilometrow_w_tysiacach: Float
}

"""
Boolean expression to filter rows from the table "Przeglad_OT_Kilometry". All fields are combined with a logical 'AND'.
"""
input Przeglad_OT_Kilometry_bool_exp {
  Przeglads: Przeglad_bool_exp
  _and: [Przeglad_OT_Kilometry_bool_exp!]
  _not: Przeglad_OT_Kilometry_bool_exp
  _or: [Przeglad_OT_Kilometry_bool_exp!]
  id: Int_comparison_exp
  ilosc_kilometrow_w_tysiacach: Int_comparison_exp
}

"""
unique or primary key constraints on table "Przeglad_OT_Kilometry"
"""
enum Przeglad_OT_Kilometry_constraint {
  """unique or primary key constraint"""
  Przeglad_OT_Kilometry_pkey
}

"""
input type for incrementing numeric columns in table "Przeglad_OT_Kilometry"
"""
input Przeglad_OT_Kilometry_inc_input {
  id: Int
  ilosc_kilometrow_w_tysiacach: Int
}

"""
input type for inserting data into table "Przeglad_OT_Kilometry"
"""
input Przeglad_OT_Kilometry_insert_input {
  Przeglads: Przeglad_arr_rel_insert_input
  id: Int
  ilosc_kilometrow_w_tysiacach: Int
}

"""aggregate max on columns"""
type Przeglad_OT_Kilometry_max_fields {
  id: Int
  ilosc_kilometrow_w_tysiacach: Int
}

"""aggregate min on columns"""
type Przeglad_OT_Kilometry_min_fields {
  id: Int
  ilosc_kilometrow_w_tysiacach: Int
}

"""
response of any mutation on the table "Przeglad_OT_Kilometry"
"""
type Przeglad_OT_Kilometry_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Przeglad_OT_Kilometry!]!
}

"""
input type for inserting object relation for remote table "Przeglad_OT_Kilometry"
"""
input Przeglad_OT_Kilometry_obj_rel_insert_input {
  data: Przeglad_OT_Kilometry_insert_input!

  """on conflict condition"""
  on_conflict: Przeglad_OT_Kilometry_on_conflict
}

"""
on conflict condition type for table "Przeglad_OT_Kilometry"
"""
input Przeglad_OT_Kilometry_on_conflict {
  constraint: Przeglad_OT_Kilometry_constraint!
  update_columns: [Przeglad_OT_Kilometry_update_column!]!
  where: Przeglad_OT_Kilometry_bool_exp
}

"""Ordering options when selecting data from "Przeglad_OT_Kilometry"."""
input Przeglad_OT_Kilometry_order_by {
  Przeglads_aggregate: Przeglad_aggregate_order_by
  id: order_by
  ilosc_kilometrow_w_tysiacach: order_by
}

"""primary key columns input for table: Przeglad_OT_Kilometry"""
input Przeglad_OT_Kilometry_pk_columns_input {
  id: Int!
}

"""
select columns of table "Przeglad_OT_Kilometry"
"""
enum Przeglad_OT_Kilometry_select_column {
  """column name"""
  id

  """column name"""
  ilosc_kilometrow_w_tysiacach
}

"""
input type for updating data in table "Przeglad_OT_Kilometry"
"""
input Przeglad_OT_Kilometry_set_input {
  id: Int
  ilosc_kilometrow_w_tysiacach: Int
}

"""aggregate stddev on columns"""
type Przeglad_OT_Kilometry_stddev_fields {
  id: Float
  ilosc_kilometrow_w_tysiacach: Float
}

"""aggregate stddev_pop on columns"""
type Przeglad_OT_Kilometry_stddev_pop_fields {
  id: Float
  ilosc_kilometrow_w_tysiacach: Float
}

"""aggregate stddev_samp on columns"""
type Przeglad_OT_Kilometry_stddev_samp_fields {
  id: Float
  ilosc_kilometrow_w_tysiacach: Float
}

"""aggregate sum on columns"""
type Przeglad_OT_Kilometry_sum_fields {
  id: Int
  ilosc_kilometrow_w_tysiacach: Int
}

"""
update columns of table "Przeglad_OT_Kilometry"
"""
enum Przeglad_OT_Kilometry_update_column {
  """column name"""
  id

  """column name"""
  ilosc_kilometrow_w_tysiacach
}

"""aggregate var_pop on columns"""
type Przeglad_OT_Kilometry_var_pop_fields {
  id: Float
  ilosc_kilometrow_w_tysiacach: Float
}

"""aggregate var_samp on columns"""
type Przeglad_OT_Kilometry_var_samp_fields {
  id: Float
  ilosc_kilometrow_w_tysiacach: Float
}

"""aggregate variance on columns"""
type Przeglad_OT_Kilometry_variance_fields {
  id: Float
  ilosc_kilometrow_w_tysiacach: Float
}

"""
aggregated selection of "Przeglad"
"""
type Przeglad_aggregate {
  aggregate: Przeglad_aggregate_fields
  nodes: [Przeglad!]!
}

"""
aggregate fields of "Przeglad"
"""
type Przeglad_aggregate_fields {
  avg: Przeglad_avg_fields
  count(columns: [Przeglad_select_column!], distinct: Boolean): Int!
  max: Przeglad_max_fields
  min: Przeglad_min_fields
  stddev: Przeglad_stddev_fields
  stddev_pop: Przeglad_stddev_pop_fields
  stddev_samp: Przeglad_stddev_samp_fields
  sum: Przeglad_sum_fields
  var_pop: Przeglad_var_pop_fields
  var_samp: Przeglad_var_samp_fields
  variance: Przeglad_variance_fields
}

"""
order by aggregate values of table "Przeglad"
"""
input Przeglad_aggregate_order_by {
  avg: Przeglad_avg_order_by
  count: order_by
  max: Przeglad_max_order_by
  min: Przeglad_min_order_by
  stddev: Przeglad_stddev_order_by
  stddev_pop: Przeglad_stddev_pop_order_by
  stddev_samp: Przeglad_stddev_samp_order_by
  sum: Przeglad_sum_order_by
  var_pop: Przeglad_var_pop_order_by
  var_samp: Przeglad_var_samp_order_by
  variance: Przeglad_variance_order_by
}

"""
input type for inserting array relation for remote table "Przeglad"
"""
input Przeglad_arr_rel_insert_input {
  data: [Przeglad_insert_input!]!

  """on conflict condition"""
  on_conflict: Przeglad_on_conflict
}

"""aggregate avg on columns"""
type Przeglad_avg_fields {
  id: Float
  id_auto: Float
  id_przeglad_koszta_dodatkowe: Float
  id_przeglad_ot_kilometry: Float
}

"""
order by avg() on columns of table "Przeglad"
"""
input Przeglad_avg_order_by {
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""
Boolean expression to filter rows from the table "Przeglad". All fields are combined with a logical 'AND'.
"""
input Przeglad_bool_exp {
  Auto: Auto_bool_exp
  Przeglad_Koszta_Dodatkowe: Przeglad_Koszta_Dodatkowe_bool_exp
  Przeglad_OT_Kilometry: Przeglad_OT_Kilometry_bool_exp
  _and: [Przeglad_bool_exp!]
  _not: Przeglad_bool_exp
  _or: [Przeglad_bool_exp!]
  data_przegladu: date_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  id_przeglad_koszta_dodatkowe: Int_comparison_exp
  id_przeglad_ot_kilometry: Int_comparison_exp
  is_wymiana_rozrzadu: Boolean_comparison_exp
}

"""
unique or primary key constraints on table "Przeglad"
"""
enum Przeglad_constraint {
  """unique or primary key constraint"""
  Przeglad_pkey
}

"""
input type for incrementing numeric columns in table "Przeglad"
"""
input Przeglad_inc_input {
  id: Int
  id_auto: Int
  id_przeglad_koszta_dodatkowe: Int
  id_przeglad_ot_kilometry: Int
}

"""
input type for inserting data into table "Przeglad"
"""
input Przeglad_insert_input {
  Auto: Auto_obj_rel_insert_input
  Przeglad_Koszta_Dodatkowe: Przeglad_Koszta_Dodatkowe_obj_rel_insert_input
  Przeglad_OT_Kilometry: Przeglad_OT_Kilometry_obj_rel_insert_input
  data_przegladu: date
  id: Int
  id_auto: Int
  id_przeglad_koszta_dodatkowe: Int
  id_przeglad_ot_kilometry: Int
  is_wymiana_rozrzadu: Boolean
}

"""aggregate max on columns"""
type Przeglad_max_fields {
  data_przegladu: date
  id: Int
  id_auto: Int
  id_przeglad_koszta_dodatkowe: Int
  id_przeglad_ot_kilometry: Int
}

"""
order by max() on columns of table "Przeglad"
"""
input Przeglad_max_order_by {
  data_przegladu: order_by
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""aggregate min on columns"""
type Przeglad_min_fields {
  data_przegladu: date
  id: Int
  id_auto: Int
  id_przeglad_koszta_dodatkowe: Int
  id_przeglad_ot_kilometry: Int
}

"""
order by min() on columns of table "Przeglad"
"""
input Przeglad_min_order_by {
  data_przegladu: order_by
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""
response of any mutation on the table "Przeglad"
"""
type Przeglad_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Przeglad!]!
}

"""
on conflict condition type for table "Przeglad"
"""
input Przeglad_on_conflict {
  constraint: Przeglad_constraint!
  update_columns: [Przeglad_update_column!]!
  where: Przeglad_bool_exp
}

"""Ordering options when selecting data from "Przeglad"."""
input Przeglad_order_by {
  Auto: Auto_order_by
  Przeglad_Koszta_Dodatkowe: Przeglad_Koszta_Dodatkowe_order_by
  Przeglad_OT_Kilometry: Przeglad_OT_Kilometry_order_by
  data_przegladu: order_by
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
  is_wymiana_rozrzadu: order_by
}

"""primary key columns input for table: Przeglad"""
input Przeglad_pk_columns_input {
  id: Int!
}

"""
select columns of table "Przeglad"
"""
enum Przeglad_select_column {
  """column name"""
  data_przegladu

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_przeglad_koszta_dodatkowe

  """column name"""
  id_przeglad_ot_kilometry

  """column name"""
  is_wymiana_rozrzadu
}

"""
input type for updating data in table "Przeglad"
"""
input Przeglad_set_input {
  data_przegladu: date
  id: Int
  id_auto: Int
  id_przeglad_koszta_dodatkowe: Int
  id_przeglad_ot_kilometry: Int
  is_wymiana_rozrzadu: Boolean
}

"""aggregate stddev on columns"""
type Przeglad_stddev_fields {
  id: Float
  id_auto: Float
  id_przeglad_koszta_dodatkowe: Float
  id_przeglad_ot_kilometry: Float
}

"""
order by stddev() on columns of table "Przeglad"
"""
input Przeglad_stddev_order_by {
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""aggregate stddev_pop on columns"""
type Przeglad_stddev_pop_fields {
  id: Float
  id_auto: Float
  id_przeglad_koszta_dodatkowe: Float
  id_przeglad_ot_kilometry: Float
}

"""
order by stddev_pop() on columns of table "Przeglad"
"""
input Przeglad_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""aggregate stddev_samp on columns"""
type Przeglad_stddev_samp_fields {
  id: Float
  id_auto: Float
  id_przeglad_koszta_dodatkowe: Float
  id_przeglad_ot_kilometry: Float
}

"""
order by stddev_samp() on columns of table "Przeglad"
"""
input Przeglad_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""aggregate sum on columns"""
type Przeglad_sum_fields {
  id: Int
  id_auto: Int
  id_przeglad_koszta_dodatkowe: Int
  id_przeglad_ot_kilometry: Int
}

"""
order by sum() on columns of table "Przeglad"
"""
input Przeglad_sum_order_by {
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""
update columns of table "Przeglad"
"""
enum Przeglad_update_column {
  """column name"""
  data_przegladu

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_przeglad_koszta_dodatkowe

  """column name"""
  id_przeglad_ot_kilometry

  """column name"""
  is_wymiana_rozrzadu
}

"""aggregate var_pop on columns"""
type Przeglad_var_pop_fields {
  id: Float
  id_auto: Float
  id_przeglad_koszta_dodatkowe: Float
  id_przeglad_ot_kilometry: Float
}

"""
order by var_pop() on columns of table "Przeglad"
"""
input Przeglad_var_pop_order_by {
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""aggregate var_samp on columns"""
type Przeglad_var_samp_fields {
  id: Float
  id_auto: Float
  id_przeglad_koszta_dodatkowe: Float
  id_przeglad_ot_kilometry: Float
}

"""
order by var_samp() on columns of table "Przeglad"
"""
input Przeglad_var_samp_order_by {
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""aggregate variance on columns"""
type Przeglad_variance_fields {
  id: Float
  id_auto: Float
  id_przeglad_koszta_dodatkowe: Float
  id_przeglad_ot_kilometry: Float
}

"""
order by variance() on columns of table "Przeglad"
"""
input Przeglad_variance_order_by {
  id: order_by
  id_auto: order_by
  id_przeglad_koszta_dodatkowe: order_by
  id_przeglad_ot_kilometry: order_by
}

"""
columns and relationships of "Status_Awarii"
"""
type Status_Awarii {
  """An array relationship"""
  Awaria(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): [Awaria!]!

  """An aggregate relationship"""
  Awaria_aggregate(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): Awaria_aggregate!
  id: Int!
  nazwa_statusu: String!
}

"""
aggregated selection of "Status_Awarii"
"""
type Status_Awarii_aggregate {
  aggregate: Status_Awarii_aggregate_fields
  nodes: [Status_Awarii!]!
}

"""
aggregate fields of "Status_Awarii"
"""
type Status_Awarii_aggregate_fields {
  avg: Status_Awarii_avg_fields
  count(columns: [Status_Awarii_select_column!], distinct: Boolean): Int!
  max: Status_Awarii_max_fields
  min: Status_Awarii_min_fields
  stddev: Status_Awarii_stddev_fields
  stddev_pop: Status_Awarii_stddev_pop_fields
  stddev_samp: Status_Awarii_stddev_samp_fields
  sum: Status_Awarii_sum_fields
  var_pop: Status_Awarii_var_pop_fields
  var_samp: Status_Awarii_var_samp_fields
  variance: Status_Awarii_variance_fields
}

"""aggregate avg on columns"""
type Status_Awarii_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "Status_Awarii". All fields are combined with a logical 'AND'.
"""
input Status_Awarii_bool_exp {
  Awaria: Awaria_bool_exp
  _and: [Status_Awarii_bool_exp!]
  _not: Status_Awarii_bool_exp
  _or: [Status_Awarii_bool_exp!]
  id: Int_comparison_exp
  nazwa_statusu: String_comparison_exp
}

"""
unique or primary key constraints on table "Status_Awarii"
"""
enum Status_Awarii_constraint {
  """unique or primary key constraint"""
  Status_Awarii_pkey
}

"""
input type for incrementing numeric columns in table "Status_Awarii"
"""
input Status_Awarii_inc_input {
  id: Int
}

"""
input type for inserting data into table "Status_Awarii"
"""
input Status_Awarii_insert_input {
  Awaria: Awaria_arr_rel_insert_input
  id: Int
  nazwa_statusu: String
}

"""aggregate max on columns"""
type Status_Awarii_max_fields {
  id: Int
  nazwa_statusu: String
}

"""aggregate min on columns"""
type Status_Awarii_min_fields {
  id: Int
  nazwa_statusu: String
}

"""
response of any mutation on the table "Status_Awarii"
"""
type Status_Awarii_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Status_Awarii!]!
}

"""
input type for inserting object relation for remote table "Status_Awarii"
"""
input Status_Awarii_obj_rel_insert_input {
  data: Status_Awarii_insert_input!

  """on conflict condition"""
  on_conflict: Status_Awarii_on_conflict
}

"""
on conflict condition type for table "Status_Awarii"
"""
input Status_Awarii_on_conflict {
  constraint: Status_Awarii_constraint!
  update_columns: [Status_Awarii_update_column!]!
  where: Status_Awarii_bool_exp
}

"""Ordering options when selecting data from "Status_Awarii"."""
input Status_Awarii_order_by {
  Awaria_aggregate: Awaria_aggregate_order_by
  id: order_by
  nazwa_statusu: order_by
}

"""primary key columns input for table: Status_Awarii"""
input Status_Awarii_pk_columns_input {
  id: Int!
}

"""
select columns of table "Status_Awarii"
"""
enum Status_Awarii_select_column {
  """column name"""
  id

  """column name"""
  nazwa_statusu
}

"""
input type for updating data in table "Status_Awarii"
"""
input Status_Awarii_set_input {
  id: Int
  nazwa_statusu: String
}

"""aggregate stddev on columns"""
type Status_Awarii_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type Status_Awarii_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type Status_Awarii_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type Status_Awarii_sum_fields {
  id: Int
}

"""
update columns of table "Status_Awarii"
"""
enum Status_Awarii_update_column {
  """column name"""
  id

  """column name"""
  nazwa_statusu
}

"""aggregate var_pop on columns"""
type Status_Awarii_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type Status_Awarii_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type Status_Awarii_variance_fields {
  id: Float
}

"""
columns and relationships of "Status_Szkody"
"""
type Status_Szkody {
  """An array relationship"""
  Szkodas(
    """distinct select on columns"""
    distinct_on: [Szkoda_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Szkoda_order_by!]

    """filter the rows returned"""
    where: Szkoda_bool_exp
  ): [Szkoda!]!

  """An aggregate relationship"""
  Szkodas_aggregate(
    """distinct select on columns"""
    distinct_on: [Szkoda_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Szkoda_order_by!]

    """filter the rows returned"""
    where: Szkoda_bool_exp
  ): Szkoda_aggregate!
  id: Int!
  nazwa_statusu: String!
}

"""
aggregated selection of "Status_Szkody"
"""
type Status_Szkody_aggregate {
  aggregate: Status_Szkody_aggregate_fields
  nodes: [Status_Szkody!]!
}

"""
aggregate fields of "Status_Szkody"
"""
type Status_Szkody_aggregate_fields {
  avg: Status_Szkody_avg_fields
  count(columns: [Status_Szkody_select_column!], distinct: Boolean): Int!
  max: Status_Szkody_max_fields
  min: Status_Szkody_min_fields
  stddev: Status_Szkody_stddev_fields
  stddev_pop: Status_Szkody_stddev_pop_fields
  stddev_samp: Status_Szkody_stddev_samp_fields
  sum: Status_Szkody_sum_fields
  var_pop: Status_Szkody_var_pop_fields
  var_samp: Status_Szkody_var_samp_fields
  variance: Status_Szkody_variance_fields
}

"""aggregate avg on columns"""
type Status_Szkody_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "Status_Szkody". All fields are combined with a logical 'AND'.
"""
input Status_Szkody_bool_exp {
  Szkodas: Szkoda_bool_exp
  _and: [Status_Szkody_bool_exp!]
  _not: Status_Szkody_bool_exp
  _or: [Status_Szkody_bool_exp!]
  id: Int_comparison_exp
  nazwa_statusu: String_comparison_exp
}

"""
unique or primary key constraints on table "Status_Szkody"
"""
enum Status_Szkody_constraint {
  """unique or primary key constraint"""
  Status_Szkody_pkey
}

"""
input type for incrementing numeric columns in table "Status_Szkody"
"""
input Status_Szkody_inc_input {
  id: Int
}

"""
input type for inserting data into table "Status_Szkody"
"""
input Status_Szkody_insert_input {
  Szkodas: Szkoda_arr_rel_insert_input
  id: Int
  nazwa_statusu: String
}

"""aggregate max on columns"""
type Status_Szkody_max_fields {
  id: Int
  nazwa_statusu: String
}

"""aggregate min on columns"""
type Status_Szkody_min_fields {
  id: Int
  nazwa_statusu: String
}

"""
response of any mutation on the table "Status_Szkody"
"""
type Status_Szkody_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Status_Szkody!]!
}

"""
input type for inserting object relation for remote table "Status_Szkody"
"""
input Status_Szkody_obj_rel_insert_input {
  data: Status_Szkody_insert_input!

  """on conflict condition"""
  on_conflict: Status_Szkody_on_conflict
}

"""
on conflict condition type for table "Status_Szkody"
"""
input Status_Szkody_on_conflict {
  constraint: Status_Szkody_constraint!
  update_columns: [Status_Szkody_update_column!]!
  where: Status_Szkody_bool_exp
}

"""Ordering options when selecting data from "Status_Szkody"."""
input Status_Szkody_order_by {
  Szkodas_aggregate: Szkoda_aggregate_order_by
  id: order_by
  nazwa_statusu: order_by
}

"""primary key columns input for table: Status_Szkody"""
input Status_Szkody_pk_columns_input {
  id: Int!
}

"""
select columns of table "Status_Szkody"
"""
enum Status_Szkody_select_column {
  """column name"""
  id

  """column name"""
  nazwa_statusu
}

"""
input type for updating data in table "Status_Szkody"
"""
input Status_Szkody_set_input {
  id: Int
  nazwa_statusu: String
}

"""aggregate stddev on columns"""
type Status_Szkody_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type Status_Szkody_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type Status_Szkody_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type Status_Szkody_sum_fields {
  id: Int
}

"""
update columns of table "Status_Szkody"
"""
enum Status_Szkody_update_column {
  """column name"""
  id

  """column name"""
  nazwa_statusu
}

"""aggregate var_pop on columns"""
type Status_Szkody_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type Status_Szkody_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type Status_Szkody_variance_fields {
  id: Float
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """does the column NOT match the given pattern"""
  _nlike: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "Szkoda"
"""
type Szkoda {
  """An object relationship"""
  Status_Szkody: Status_Szkody!

  """An object relationship"""
  Uzytkownik: Uzytkownik!
  adres: String!
  id: Int!
  id_auto: Int!
  id_status_szkody: Int!
  id_uzytkownik: Int!
  opis_szkody: String!
  uszkodzenia: String!
}

"""
aggregated selection of "Szkoda"
"""
type Szkoda_aggregate {
  aggregate: Szkoda_aggregate_fields
  nodes: [Szkoda!]!
}

"""
aggregate fields of "Szkoda"
"""
type Szkoda_aggregate_fields {
  avg: Szkoda_avg_fields
  count(columns: [Szkoda_select_column!], distinct: Boolean): Int!
  max: Szkoda_max_fields
  min: Szkoda_min_fields
  stddev: Szkoda_stddev_fields
  stddev_pop: Szkoda_stddev_pop_fields
  stddev_samp: Szkoda_stddev_samp_fields
  sum: Szkoda_sum_fields
  var_pop: Szkoda_var_pop_fields
  var_samp: Szkoda_var_samp_fields
  variance: Szkoda_variance_fields
}

"""
order by aggregate values of table "Szkoda"
"""
input Szkoda_aggregate_order_by {
  avg: Szkoda_avg_order_by
  count: order_by
  max: Szkoda_max_order_by
  min: Szkoda_min_order_by
  stddev: Szkoda_stddev_order_by
  stddev_pop: Szkoda_stddev_pop_order_by
  stddev_samp: Szkoda_stddev_samp_order_by
  sum: Szkoda_sum_order_by
  var_pop: Szkoda_var_pop_order_by
  var_samp: Szkoda_var_samp_order_by
  variance: Szkoda_variance_order_by
}

"""
input type for inserting array relation for remote table "Szkoda"
"""
input Szkoda_arr_rel_insert_input {
  data: [Szkoda_insert_input!]!

  """on conflict condition"""
  on_conflict: Szkoda_on_conflict
}

"""aggregate avg on columns"""
type Szkoda_avg_fields {
  id: Float
  id_auto: Float
  id_status_szkody: Float
  id_uzytkownik: Float
}

"""
order by avg() on columns of table "Szkoda"
"""
input Szkoda_avg_order_by {
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
}

"""
Boolean expression to filter rows from the table "Szkoda". All fields are combined with a logical 'AND'.
"""
input Szkoda_bool_exp {
  Status_Szkody: Status_Szkody_bool_exp
  Uzytkownik: Uzytkownik_bool_exp
  _and: [Szkoda_bool_exp!]
  _not: Szkoda_bool_exp
  _or: [Szkoda_bool_exp!]
  adres: String_comparison_exp
  id: Int_comparison_exp
  id_auto: Int_comparison_exp
  id_status_szkody: Int_comparison_exp
  id_uzytkownik: Int_comparison_exp
  opis_szkody: String_comparison_exp
  uszkodzenia: String_comparison_exp
}

"""
unique or primary key constraints on table "Szkoda"
"""
enum Szkoda_constraint {
  """unique or primary key constraint"""
  Szkoda_pkey
}

"""
input type for incrementing numeric columns in table "Szkoda"
"""
input Szkoda_inc_input {
  id: Int
  id_auto: Int
  id_status_szkody: Int
  id_uzytkownik: Int
}

"""
input type for inserting data into table "Szkoda"
"""
input Szkoda_insert_input {
  Status_Szkody: Status_Szkody_obj_rel_insert_input
  Uzytkownik: Uzytkownik_obj_rel_insert_input
  adres: String
  id: Int
  id_auto: Int
  id_status_szkody: Int
  id_uzytkownik: Int
  opis_szkody: String
  uszkodzenia: String
}

"""aggregate max on columns"""
type Szkoda_max_fields {
  adres: String
  id: Int
  id_auto: Int
  id_status_szkody: Int
  id_uzytkownik: Int
  opis_szkody: String
  uszkodzenia: String
}

"""
order by max() on columns of table "Szkoda"
"""
input Szkoda_max_order_by {
  adres: order_by
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
  opis_szkody: order_by
  uszkodzenia: order_by
}

"""aggregate min on columns"""
type Szkoda_min_fields {
  adres: String
  id: Int
  id_auto: Int
  id_status_szkody: Int
  id_uzytkownik: Int
  opis_szkody: String
  uszkodzenia: String
}

"""
order by min() on columns of table "Szkoda"
"""
input Szkoda_min_order_by {
  adres: order_by
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
  opis_szkody: order_by
  uszkodzenia: order_by
}

"""
response of any mutation on the table "Szkoda"
"""
type Szkoda_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Szkoda!]!
}

"""
on conflict condition type for table "Szkoda"
"""
input Szkoda_on_conflict {
  constraint: Szkoda_constraint!
  update_columns: [Szkoda_update_column!]!
  where: Szkoda_bool_exp
}

"""Ordering options when selecting data from "Szkoda"."""
input Szkoda_order_by {
  Status_Szkody: Status_Szkody_order_by
  Uzytkownik: Uzytkownik_order_by
  adres: order_by
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
  opis_szkody: order_by
  uszkodzenia: order_by
}

"""primary key columns input for table: Szkoda"""
input Szkoda_pk_columns_input {
  id: Int!
}

"""
select columns of table "Szkoda"
"""
enum Szkoda_select_column {
  """column name"""
  adres

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_status_szkody

  """column name"""
  id_uzytkownik

  """column name"""
  opis_szkody

  """column name"""
  uszkodzenia
}

"""
input type for updating data in table "Szkoda"
"""
input Szkoda_set_input {
  adres: String
  id: Int
  id_auto: Int
  id_status_szkody: Int
  id_uzytkownik: Int
  opis_szkody: String
  uszkodzenia: String
}

"""aggregate stddev on columns"""
type Szkoda_stddev_fields {
  id: Float
  id_auto: Float
  id_status_szkody: Float
  id_uzytkownik: Float
}

"""
order by stddev() on columns of table "Szkoda"
"""
input Szkoda_stddev_order_by {
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
}

"""aggregate stddev_pop on columns"""
type Szkoda_stddev_pop_fields {
  id: Float
  id_auto: Float
  id_status_szkody: Float
  id_uzytkownik: Float
}

"""
order by stddev_pop() on columns of table "Szkoda"
"""
input Szkoda_stddev_pop_order_by {
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
}

"""aggregate stddev_samp on columns"""
type Szkoda_stddev_samp_fields {
  id: Float
  id_auto: Float
  id_status_szkody: Float
  id_uzytkownik: Float
}

"""
order by stddev_samp() on columns of table "Szkoda"
"""
input Szkoda_stddev_samp_order_by {
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
}

"""aggregate sum on columns"""
type Szkoda_sum_fields {
  id: Int
  id_auto: Int
  id_status_szkody: Int
  id_uzytkownik: Int
}

"""
order by sum() on columns of table "Szkoda"
"""
input Szkoda_sum_order_by {
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
}

"""
update columns of table "Szkoda"
"""
enum Szkoda_update_column {
  """column name"""
  adres

  """column name"""
  id

  """column name"""
  id_auto

  """column name"""
  id_status_szkody

  """column name"""
  id_uzytkownik

  """column name"""
  opis_szkody

  """column name"""
  uszkodzenia
}

"""aggregate var_pop on columns"""
type Szkoda_var_pop_fields {
  id: Float
  id_auto: Float
  id_status_szkody: Float
  id_uzytkownik: Float
}

"""
order by var_pop() on columns of table "Szkoda"
"""
input Szkoda_var_pop_order_by {
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
}

"""aggregate var_samp on columns"""
type Szkoda_var_samp_fields {
  id: Float
  id_auto: Float
  id_status_szkody: Float
  id_uzytkownik: Float
}

"""
order by var_samp() on columns of table "Szkoda"
"""
input Szkoda_var_samp_order_by {
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
}

"""aggregate variance on columns"""
type Szkoda_variance_fields {
  id: Float
  id_auto: Float
  id_status_szkody: Float
  id_uzytkownik: Float
}

"""
order by variance() on columns of table "Szkoda"
"""
input Szkoda_variance_order_by {
  id: order_by
  id_auto: order_by
  id_status_szkody: order_by
  id_uzytkownik: order_by
}

"""
columns and relationships of "Typy_Opon"
"""
type Typy_Opon {
  """An array relationship"""
  Oponas(
    """distinct select on columns"""
    distinct_on: [Opona_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Opona_order_by!]

    """filter the rows returned"""
    where: Opona_bool_exp
  ): [Opona!]!

  """An aggregate relationship"""
  Oponas_aggregate(
    """distinct select on columns"""
    distinct_on: [Opona_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Opona_order_by!]

    """filter the rows returned"""
    where: Opona_bool_exp
  ): Opona_aggregate!
  id: Int!
  nazwa_typu: String!
}

"""
aggregated selection of "Typy_Opon"
"""
type Typy_Opon_aggregate {
  aggregate: Typy_Opon_aggregate_fields
  nodes: [Typy_Opon!]!
}

"""
aggregate fields of "Typy_Opon"
"""
type Typy_Opon_aggregate_fields {
  avg: Typy_Opon_avg_fields
  count(columns: [Typy_Opon_select_column!], distinct: Boolean): Int!
  max: Typy_Opon_max_fields
  min: Typy_Opon_min_fields
  stddev: Typy_Opon_stddev_fields
  stddev_pop: Typy_Opon_stddev_pop_fields
  stddev_samp: Typy_Opon_stddev_samp_fields
  sum: Typy_Opon_sum_fields
  var_pop: Typy_Opon_var_pop_fields
  var_samp: Typy_Opon_var_samp_fields
  variance: Typy_Opon_variance_fields
}

"""aggregate avg on columns"""
type Typy_Opon_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "Typy_Opon". All fields are combined with a logical 'AND'.
"""
input Typy_Opon_bool_exp {
  Oponas: Opona_bool_exp
  _and: [Typy_Opon_bool_exp!]
  _not: Typy_Opon_bool_exp
  _or: [Typy_Opon_bool_exp!]
  id: Int_comparison_exp
  nazwa_typu: String_comparison_exp
}

"""
unique or primary key constraints on table "Typy_Opon"
"""
enum Typy_Opon_constraint {
  """unique or primary key constraint"""
  Typy_Opon_pkey
}

"""
input type for incrementing numeric columns in table "Typy_Opon"
"""
input Typy_Opon_inc_input {
  id: Int
}

"""
input type for inserting data into table "Typy_Opon"
"""
input Typy_Opon_insert_input {
  Oponas: Opona_arr_rel_insert_input
  id: Int
  nazwa_typu: String
}

"""aggregate max on columns"""
type Typy_Opon_max_fields {
  id: Int
  nazwa_typu: String
}

"""aggregate min on columns"""
type Typy_Opon_min_fields {
  id: Int
  nazwa_typu: String
}

"""
response of any mutation on the table "Typy_Opon"
"""
type Typy_Opon_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Typy_Opon!]!
}

"""
input type for inserting object relation for remote table "Typy_Opon"
"""
input Typy_Opon_obj_rel_insert_input {
  data: Typy_Opon_insert_input!

  """on conflict condition"""
  on_conflict: Typy_Opon_on_conflict
}

"""
on conflict condition type for table "Typy_Opon"
"""
input Typy_Opon_on_conflict {
  constraint: Typy_Opon_constraint!
  update_columns: [Typy_Opon_update_column!]!
  where: Typy_Opon_bool_exp
}

"""Ordering options when selecting data from "Typy_Opon"."""
input Typy_Opon_order_by {
  Oponas_aggregate: Opona_aggregate_order_by
  id: order_by
  nazwa_typu: order_by
}

"""primary key columns input for table: Typy_Opon"""
input Typy_Opon_pk_columns_input {
  id: Int!
}

"""
select columns of table "Typy_Opon"
"""
enum Typy_Opon_select_column {
  """column name"""
  id

  """column name"""
  nazwa_typu
}

"""
input type for updating data in table "Typy_Opon"
"""
input Typy_Opon_set_input {
  id: Int
  nazwa_typu: String
}

"""aggregate stddev on columns"""
type Typy_Opon_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type Typy_Opon_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type Typy_Opon_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type Typy_Opon_sum_fields {
  id: Int
}

"""
update columns of table "Typy_Opon"
"""
enum Typy_Opon_update_column {
  """column name"""
  id

  """column name"""
  nazwa_typu
}

"""aggregate var_pop on columns"""
type Typy_Opon_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type Typy_Opon_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type Typy_Opon_variance_fields {
  id: Float
}

"""
columns and relationships of "Uzytkownik"
"""
type Uzytkownik {
  """An array relationship"""
  Awaria(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): [Awaria!]!

  """An aggregate relationship"""
  Awaria_aggregate(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): Awaria_aggregate!

  """An array relationship"""
  Historia_Uzytkownik_Autos(
    """distinct select on columns"""
    distinct_on: [Historia_Uzytkownik_Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Historia_Uzytkownik_Auto_order_by!]

    """filter the rows returned"""
    where: Historia_Uzytkownik_Auto_bool_exp
  ): [Historia_Uzytkownik_Auto!]!

  """An aggregate relationship"""
  Historia_Uzytkownik_Autos_aggregate(
    """distinct select on columns"""
    distinct_on: [Historia_Uzytkownik_Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Historia_Uzytkownik_Auto_order_by!]

    """filter the rows returned"""
    where: Historia_Uzytkownik_Auto_bool_exp
  ): Historia_Uzytkownik_Auto_aggregate!

  """An array relationship"""
  Mandats(
    """distinct select on columns"""
    distinct_on: [Mandat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Mandat_order_by!]

    """filter the rows returned"""
    where: Mandat_bool_exp
  ): [Mandat!]!

  """An aggregate relationship"""
  Mandats_aggregate(
    """distinct select on columns"""
    distinct_on: [Mandat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Mandat_order_by!]

    """filter the rows returned"""
    where: Mandat_bool_exp
  ): Mandat_aggregate!

  """An array relationship"""
  Szkodas(
    """distinct select on columns"""
    distinct_on: [Szkoda_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Szkoda_order_by!]

    """filter the rows returned"""
    where: Szkoda_bool_exp
  ): [Szkoda!]!

  """An aggregate relationship"""
  Szkodas_aggregate(
    """distinct select on columns"""
    distinct_on: [Szkoda_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Szkoda_order_by!]

    """filter the rows returned"""
    where: Szkoda_bool_exp
  ): Szkoda_aggregate!
  email: String
  id: Int!
  imie: String
  miasto: String
  nazwisko: String
  numer_prawa_jazdy: String
  pesel: bigint
  telefon: String
}

"""
aggregated selection of "Uzytkownik"
"""
type Uzytkownik_aggregate {
  aggregate: Uzytkownik_aggregate_fields
  nodes: [Uzytkownik!]!
}

"""
aggregate fields of "Uzytkownik"
"""
type Uzytkownik_aggregate_fields {
  avg: Uzytkownik_avg_fields
  count(columns: [Uzytkownik_select_column!], distinct: Boolean): Int!
  max: Uzytkownik_max_fields
  min: Uzytkownik_min_fields
  stddev: Uzytkownik_stddev_fields
  stddev_pop: Uzytkownik_stddev_pop_fields
  stddev_samp: Uzytkownik_stddev_samp_fields
  sum: Uzytkownik_sum_fields
  var_pop: Uzytkownik_var_pop_fields
  var_samp: Uzytkownik_var_samp_fields
  variance: Uzytkownik_variance_fields
}

"""aggregate avg on columns"""
type Uzytkownik_avg_fields {
  id: Float
  pesel: Float
}

"""
Boolean expression to filter rows from the table "Uzytkownik". All fields are combined with a logical 'AND'.
"""
input Uzytkownik_bool_exp {
  Awaria: Awaria_bool_exp
  Historia_Uzytkownik_Autos: Historia_Uzytkownik_Auto_bool_exp
  Mandats: Mandat_bool_exp
  Szkodas: Szkoda_bool_exp
  _and: [Uzytkownik_bool_exp!]
  _not: Uzytkownik_bool_exp
  _or: [Uzytkownik_bool_exp!]
  email: String_comparison_exp
  id: Int_comparison_exp
  imie: String_comparison_exp
  miasto: String_comparison_exp
  nazwisko: String_comparison_exp
  numer_prawa_jazdy: String_comparison_exp
  pesel: bigint_comparison_exp
  telefon: String_comparison_exp
}

"""
unique or primary key constraints on table "Uzytkownik"
"""
enum Uzytkownik_constraint {
  """unique or primary key constraint"""
  Uzytkownik_pkey
}

"""
input type for incrementing numeric columns in table "Uzytkownik"
"""
input Uzytkownik_inc_input {
  id: Int
  pesel: bigint
}

"""
input type for inserting data into table "Uzytkownik"
"""
input Uzytkownik_insert_input {
  Awaria: Awaria_arr_rel_insert_input
  Historia_Uzytkownik_Autos: Historia_Uzytkownik_Auto_arr_rel_insert_input
  Mandats: Mandat_arr_rel_insert_input
  Szkodas: Szkoda_arr_rel_insert_input
  email: String
  id: Int
  imie: String
  miasto: String
  nazwisko: String
  numer_prawa_jazdy: String
  pesel: bigint
  telefon: String
}

"""aggregate max on columns"""
type Uzytkownik_max_fields {
  email: String
  id: Int
  imie: String
  miasto: String
  nazwisko: String
  numer_prawa_jazdy: String
  pesel: bigint
  telefon: String
}

"""aggregate min on columns"""
type Uzytkownik_min_fields {
  email: String
  id: Int
  imie: String
  miasto: String
  nazwisko: String
  numer_prawa_jazdy: String
  pesel: bigint
  telefon: String
}

"""
response of any mutation on the table "Uzytkownik"
"""
type Uzytkownik_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Uzytkownik!]!
}

"""
input type for inserting object relation for remote table "Uzytkownik"
"""
input Uzytkownik_obj_rel_insert_input {
  data: Uzytkownik_insert_input!

  """on conflict condition"""
  on_conflict: Uzytkownik_on_conflict
}

"""
on conflict condition type for table "Uzytkownik"
"""
input Uzytkownik_on_conflict {
  constraint: Uzytkownik_constraint!
  update_columns: [Uzytkownik_update_column!]!
  where: Uzytkownik_bool_exp
}

"""Ordering options when selecting data from "Uzytkownik"."""
input Uzytkownik_order_by {
  Awaria_aggregate: Awaria_aggregate_order_by
  Historia_Uzytkownik_Autos_aggregate: Historia_Uzytkownik_Auto_aggregate_order_by
  Mandats_aggregate: Mandat_aggregate_order_by
  Szkodas_aggregate: Szkoda_aggregate_order_by
  email: order_by
  id: order_by
  imie: order_by
  miasto: order_by
  nazwisko: order_by
  numer_prawa_jazdy: order_by
  pesel: order_by
  telefon: order_by
}

"""primary key columns input for table: Uzytkownik"""
input Uzytkownik_pk_columns_input {
  id: Int!
}

"""
select columns of table "Uzytkownik"
"""
enum Uzytkownik_select_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  imie

  """column name"""
  miasto

  """column name"""
  nazwisko

  """column name"""
  numer_prawa_jazdy

  """column name"""
  pesel

  """column name"""
  telefon
}

"""
input type for updating data in table "Uzytkownik"
"""
input Uzytkownik_set_input {
  email: String
  id: Int
  imie: String
  miasto: String
  nazwisko: String
  numer_prawa_jazdy: String
  pesel: bigint
  telefon: String
}

"""aggregate stddev on columns"""
type Uzytkownik_stddev_fields {
  id: Float
  pesel: Float
}

"""aggregate stddev_pop on columns"""
type Uzytkownik_stddev_pop_fields {
  id: Float
  pesel: Float
}

"""aggregate stddev_samp on columns"""
type Uzytkownik_stddev_samp_fields {
  id: Float
  pesel: Float
}

"""aggregate sum on columns"""
type Uzytkownik_sum_fields {
  id: Int
  pesel: bigint
}

"""
update columns of table "Uzytkownik"
"""
enum Uzytkownik_update_column {
  """column name"""
  email

  """column name"""
  id

  """column name"""
  imie

  """column name"""
  miasto

  """column name"""
  nazwisko

  """column name"""
  numer_prawa_jazdy

  """column name"""
  pesel

  """column name"""
  telefon
}

"""aggregate var_pop on columns"""
type Uzytkownik_var_pop_fields {
  id: Float
  pesel: Float
}

"""aggregate var_samp on columns"""
type Uzytkownik_var_samp_fields {
  id: Float
  pesel: Float
}

"""aggregate variance on columns"""
type Uzytkownik_variance_fields {
  id: Float
  pesel: Float
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "Auto"
  """
  delete_Auto(
    """filter the rows which have to be deleted"""
    where: Auto_bool_exp!
  ): Auto_mutation_response

  """
  delete single row from the table: "Auto"
  """
  delete_Auto_by_pk(id: Int!): Auto

  """
  delete data from the table: "Awaria"
  """
  delete_Awaria(
    """filter the rows which have to be deleted"""
    where: Awaria_bool_exp!
  ): Awaria_mutation_response

  """
  delete single row from the table: "Awaria"
  """
  delete_Awaria_by_pk(id: Int!): Awaria

  """
  delete data from the table: "Grupa_Aut_Klienta"
  """
  delete_Grupa_Aut_Klienta(
    """filter the rows which have to be deleted"""
    where: Grupa_Aut_Klienta_bool_exp!
  ): Grupa_Aut_Klienta_mutation_response

  """
  delete single row from the table: "Grupa_Aut_Klienta"
  """
  delete_Grupa_Aut_Klienta_by_pk(id: Int!): Grupa_Aut_Klienta

  """
  delete data from the table: "Historia_Uzytkownik_Auto"
  """
  delete_Historia_Uzytkownik_Auto(
    """filter the rows which have to be deleted"""
    where: Historia_Uzytkownik_Auto_bool_exp!
  ): Historia_Uzytkownik_Auto_mutation_response

  """
  delete single row from the table: "Historia_Uzytkownik_Auto"
  """
  delete_Historia_Uzytkownik_Auto_by_pk(id: Int!): Historia_Uzytkownik_Auto

  """
  delete data from the table: "Karta_Orlen"
  """
  delete_Karta_Orlen(
    """filter the rows which have to be deleted"""
    where: Karta_Orlen_bool_exp!
  ): Karta_Orlen_mutation_response

  """
  delete single row from the table: "Karta_Orlen"
  """
  delete_Karta_Orlen_by_pk(id: Int!): Karta_Orlen

  """
  delete data from the table: "Klient"
  """
  delete_Klient(
    """filter the rows which have to be deleted"""
    where: Klient_bool_exp!
  ): Klient_mutation_response

  """
  delete single row from the table: "Klient"
  """
  delete_Klient_by_pk(id: Int!): Klient

  """
  delete data from the table: "Leasing"
  """
  delete_Leasing(
    """filter the rows which have to be deleted"""
    where: Leasing_bool_exp!
  ): Leasing_mutation_response

  """
  delete single row from the table: "Leasing"
  """
  delete_Leasing_by_pk(id: Int!): Leasing

  """
  delete data from the table: "Mandat"
  """
  delete_Mandat(
    """filter the rows which have to be deleted"""
    where: Mandat_bool_exp!
  ): Mandat_mutation_response

  """
  delete single row from the table: "Mandat"
  """
  delete_Mandat_by_pk(id: Int!): Mandat

  """
  delete data from the table: "Opona"
  """
  delete_Opona(
    """filter the rows which have to be deleted"""
    where: Opona_bool_exp!
  ): Opona_mutation_response

  """
  delete single row from the table: "Opona"
  """
  delete_Opona_by_pk(id: Int!): Opona

  """
  delete data from the table: "Polisa"
  """
  delete_Polisa(
    """filter the rows which have to be deleted"""
    where: Polisa_bool_exp!
  ): Polisa_mutation_response

  """
  delete single row from the table: "Polisa"
  """
  delete_Polisa_by_pk(id: Int!): Polisa

  """
  delete data from the table: "Przebieg"
  """
  delete_Przebieg(
    """filter the rows which have to be deleted"""
    where: Przebieg_bool_exp!
  ): Przebieg_mutation_response

  """
  delete single row from the table: "Przebieg"
  """
  delete_Przebieg_by_pk(id: Int!): Przebieg

  """
  delete data from the table: "Przeglad"
  """
  delete_Przeglad(
    """filter the rows which have to be deleted"""
    where: Przeglad_bool_exp!
  ): Przeglad_mutation_response

  """
  delete data from the table: "Przeglad_Koszta_Dodatkowe"
  """
  delete_Przeglad_Koszta_Dodatkowe(
    """filter the rows which have to be deleted"""
    where: Przeglad_Koszta_Dodatkowe_bool_exp!
  ): Przeglad_Koszta_Dodatkowe_mutation_response

  """
  delete single row from the table: "Przeglad_Koszta_Dodatkowe"
  """
  delete_Przeglad_Koszta_Dodatkowe_by_pk(id: Int!): Przeglad_Koszta_Dodatkowe

  """
  delete data from the table: "Przeglad_OT_Kilometry"
  """
  delete_Przeglad_OT_Kilometry(
    """filter the rows which have to be deleted"""
    where: Przeglad_OT_Kilometry_bool_exp!
  ): Przeglad_OT_Kilometry_mutation_response

  """
  delete single row from the table: "Przeglad_OT_Kilometry"
  """
  delete_Przeglad_OT_Kilometry_by_pk(id: Int!): Przeglad_OT_Kilometry

  """
  delete single row from the table: "Przeglad"
  """
  delete_Przeglad_by_pk(id: Int!): Przeglad

  """
  delete data from the table: "Status_Awarii"
  """
  delete_Status_Awarii(
    """filter the rows which have to be deleted"""
    where: Status_Awarii_bool_exp!
  ): Status_Awarii_mutation_response

  """
  delete single row from the table: "Status_Awarii"
  """
  delete_Status_Awarii_by_pk(id: Int!): Status_Awarii

  """
  delete data from the table: "Status_Szkody"
  """
  delete_Status_Szkody(
    """filter the rows which have to be deleted"""
    where: Status_Szkody_bool_exp!
  ): Status_Szkody_mutation_response

  """
  delete single row from the table: "Status_Szkody"
  """
  delete_Status_Szkody_by_pk(id: Int!): Status_Szkody

  """
  delete data from the table: "Szkoda"
  """
  delete_Szkoda(
    """filter the rows which have to be deleted"""
    where: Szkoda_bool_exp!
  ): Szkoda_mutation_response

  """
  delete single row from the table: "Szkoda"
  """
  delete_Szkoda_by_pk(id: Int!): Szkoda

  """
  delete data from the table: "Typy_Opon"
  """
  delete_Typy_Opon(
    """filter the rows which have to be deleted"""
    where: Typy_Opon_bool_exp!
  ): Typy_Opon_mutation_response

  """
  delete single row from the table: "Typy_Opon"
  """
  delete_Typy_Opon_by_pk(id: Int!): Typy_Opon

  """
  delete data from the table: "Uzytkownik"
  """
  delete_Uzytkownik(
    """filter the rows which have to be deleted"""
    where: Uzytkownik_bool_exp!
  ): Uzytkownik_mutation_response

  """
  delete single row from the table: "Uzytkownik"
  """
  delete_Uzytkownik_by_pk(id: Int!): Uzytkownik

  """
  insert data into the table: "Auto"
  """
  insert_Auto(
    """the rows to be inserted"""
    objects: [Auto_insert_input!]!

    """on conflict condition"""
    on_conflict: Auto_on_conflict
  ): Auto_mutation_response

  """
  insert a single row into the table: "Auto"
  """
  insert_Auto_one(
    """the row to be inserted"""
    object: Auto_insert_input!

    """on conflict condition"""
    on_conflict: Auto_on_conflict
  ): Auto

  """
  insert data into the table: "Awaria"
  """
  insert_Awaria(
    """the rows to be inserted"""
    objects: [Awaria_insert_input!]!

    """on conflict condition"""
    on_conflict: Awaria_on_conflict
  ): Awaria_mutation_response

  """
  insert a single row into the table: "Awaria"
  """
  insert_Awaria_one(
    """the row to be inserted"""
    object: Awaria_insert_input!

    """on conflict condition"""
    on_conflict: Awaria_on_conflict
  ): Awaria

  """
  insert data into the table: "Grupa_Aut_Klienta"
  """
  insert_Grupa_Aut_Klienta(
    """the rows to be inserted"""
    objects: [Grupa_Aut_Klienta_insert_input!]!

    """on conflict condition"""
    on_conflict: Grupa_Aut_Klienta_on_conflict
  ): Grupa_Aut_Klienta_mutation_response

  """
  insert a single row into the table: "Grupa_Aut_Klienta"
  """
  insert_Grupa_Aut_Klienta_one(
    """the row to be inserted"""
    object: Grupa_Aut_Klienta_insert_input!

    """on conflict condition"""
    on_conflict: Grupa_Aut_Klienta_on_conflict
  ): Grupa_Aut_Klienta

  """
  insert data into the table: "Historia_Uzytkownik_Auto"
  """
  insert_Historia_Uzytkownik_Auto(
    """the rows to be inserted"""
    objects: [Historia_Uzytkownik_Auto_insert_input!]!

    """on conflict condition"""
    on_conflict: Historia_Uzytkownik_Auto_on_conflict
  ): Historia_Uzytkownik_Auto_mutation_response

  """
  insert a single row into the table: "Historia_Uzytkownik_Auto"
  """
  insert_Historia_Uzytkownik_Auto_one(
    """the row to be inserted"""
    object: Historia_Uzytkownik_Auto_insert_input!

    """on conflict condition"""
    on_conflict: Historia_Uzytkownik_Auto_on_conflict
  ): Historia_Uzytkownik_Auto

  """
  insert data into the table: "Karta_Orlen"
  """
  insert_Karta_Orlen(
    """the rows to be inserted"""
    objects: [Karta_Orlen_insert_input!]!

    """on conflict condition"""
    on_conflict: Karta_Orlen_on_conflict
  ): Karta_Orlen_mutation_response

  """
  insert a single row into the table: "Karta_Orlen"
  """
  insert_Karta_Orlen_one(
    """the row to be inserted"""
    object: Karta_Orlen_insert_input!

    """on conflict condition"""
    on_conflict: Karta_Orlen_on_conflict
  ): Karta_Orlen

  """
  insert data into the table: "Klient"
  """
  insert_Klient(
    """the rows to be inserted"""
    objects: [Klient_insert_input!]!

    """on conflict condition"""
    on_conflict: Klient_on_conflict
  ): Klient_mutation_response

  """
  insert a single row into the table: "Klient"
  """
  insert_Klient_one(
    """the row to be inserted"""
    object: Klient_insert_input!

    """on conflict condition"""
    on_conflict: Klient_on_conflict
  ): Klient

  """
  insert data into the table: "Leasing"
  """
  insert_Leasing(
    """the rows to be inserted"""
    objects: [Leasing_insert_input!]!

    """on conflict condition"""
    on_conflict: Leasing_on_conflict
  ): Leasing_mutation_response

  """
  insert a single row into the table: "Leasing"
  """
  insert_Leasing_one(
    """the row to be inserted"""
    object: Leasing_insert_input!

    """on conflict condition"""
    on_conflict: Leasing_on_conflict
  ): Leasing

  """
  insert data into the table: "Mandat"
  """
  insert_Mandat(
    """the rows to be inserted"""
    objects: [Mandat_insert_input!]!

    """on conflict condition"""
    on_conflict: Mandat_on_conflict
  ): Mandat_mutation_response

  """
  insert a single row into the table: "Mandat"
  """
  insert_Mandat_one(
    """the row to be inserted"""
    object: Mandat_insert_input!

    """on conflict condition"""
    on_conflict: Mandat_on_conflict
  ): Mandat

  """
  insert data into the table: "Opona"
  """
  insert_Opona(
    """the rows to be inserted"""
    objects: [Opona_insert_input!]!

    """on conflict condition"""
    on_conflict: Opona_on_conflict
  ): Opona_mutation_response

  """
  insert a single row into the table: "Opona"
  """
  insert_Opona_one(
    """the row to be inserted"""
    object: Opona_insert_input!

    """on conflict condition"""
    on_conflict: Opona_on_conflict
  ): Opona

  """
  insert data into the table: "Polisa"
  """
  insert_Polisa(
    """the rows to be inserted"""
    objects: [Polisa_insert_input!]!

    """on conflict condition"""
    on_conflict: Polisa_on_conflict
  ): Polisa_mutation_response

  """
  insert a single row into the table: "Polisa"
  """
  insert_Polisa_one(
    """the row to be inserted"""
    object: Polisa_insert_input!

    """on conflict condition"""
    on_conflict: Polisa_on_conflict
  ): Polisa

  """
  insert data into the table: "Przebieg"
  """
  insert_Przebieg(
    """the rows to be inserted"""
    objects: [Przebieg_insert_input!]!

    """on conflict condition"""
    on_conflict: Przebieg_on_conflict
  ): Przebieg_mutation_response

  """
  insert a single row into the table: "Przebieg"
  """
  insert_Przebieg_one(
    """the row to be inserted"""
    object: Przebieg_insert_input!

    """on conflict condition"""
    on_conflict: Przebieg_on_conflict
  ): Przebieg

  """
  insert data into the table: "Przeglad"
  """
  insert_Przeglad(
    """the rows to be inserted"""
    objects: [Przeglad_insert_input!]!

    """on conflict condition"""
    on_conflict: Przeglad_on_conflict
  ): Przeglad_mutation_response

  """
  insert data into the table: "Przeglad_Koszta_Dodatkowe"
  """
  insert_Przeglad_Koszta_Dodatkowe(
    """the rows to be inserted"""
    objects: [Przeglad_Koszta_Dodatkowe_insert_input!]!

    """on conflict condition"""
    on_conflict: Przeglad_Koszta_Dodatkowe_on_conflict
  ): Przeglad_Koszta_Dodatkowe_mutation_response

  """
  insert a single row into the table: "Przeglad_Koszta_Dodatkowe"
  """
  insert_Przeglad_Koszta_Dodatkowe_one(
    """the row to be inserted"""
    object: Przeglad_Koszta_Dodatkowe_insert_input!

    """on conflict condition"""
    on_conflict: Przeglad_Koszta_Dodatkowe_on_conflict
  ): Przeglad_Koszta_Dodatkowe

  """
  insert data into the table: "Przeglad_OT_Kilometry"
  """
  insert_Przeglad_OT_Kilometry(
    """the rows to be inserted"""
    objects: [Przeglad_OT_Kilometry_insert_input!]!

    """on conflict condition"""
    on_conflict: Przeglad_OT_Kilometry_on_conflict
  ): Przeglad_OT_Kilometry_mutation_response

  """
  insert a single row into the table: "Przeglad_OT_Kilometry"
  """
  insert_Przeglad_OT_Kilometry_one(
    """the row to be inserted"""
    object: Przeglad_OT_Kilometry_insert_input!

    """on conflict condition"""
    on_conflict: Przeglad_OT_Kilometry_on_conflict
  ): Przeglad_OT_Kilometry

  """
  insert a single row into the table: "Przeglad"
  """
  insert_Przeglad_one(
    """the row to be inserted"""
    object: Przeglad_insert_input!

    """on conflict condition"""
    on_conflict: Przeglad_on_conflict
  ): Przeglad

  """
  insert data into the table: "Status_Awarii"
  """
  insert_Status_Awarii(
    """the rows to be inserted"""
    objects: [Status_Awarii_insert_input!]!

    """on conflict condition"""
    on_conflict: Status_Awarii_on_conflict
  ): Status_Awarii_mutation_response

  """
  insert a single row into the table: "Status_Awarii"
  """
  insert_Status_Awarii_one(
    """the row to be inserted"""
    object: Status_Awarii_insert_input!

    """on conflict condition"""
    on_conflict: Status_Awarii_on_conflict
  ): Status_Awarii

  """
  insert data into the table: "Status_Szkody"
  """
  insert_Status_Szkody(
    """the rows to be inserted"""
    objects: [Status_Szkody_insert_input!]!

    """on conflict condition"""
    on_conflict: Status_Szkody_on_conflict
  ): Status_Szkody_mutation_response

  """
  insert a single row into the table: "Status_Szkody"
  """
  insert_Status_Szkody_one(
    """the row to be inserted"""
    object: Status_Szkody_insert_input!

    """on conflict condition"""
    on_conflict: Status_Szkody_on_conflict
  ): Status_Szkody

  """
  insert data into the table: "Szkoda"
  """
  insert_Szkoda(
    """the rows to be inserted"""
    objects: [Szkoda_insert_input!]!

    """on conflict condition"""
    on_conflict: Szkoda_on_conflict
  ): Szkoda_mutation_response

  """
  insert a single row into the table: "Szkoda"
  """
  insert_Szkoda_one(
    """the row to be inserted"""
    object: Szkoda_insert_input!

    """on conflict condition"""
    on_conflict: Szkoda_on_conflict
  ): Szkoda

  """
  insert data into the table: "Typy_Opon"
  """
  insert_Typy_Opon(
    """the rows to be inserted"""
    objects: [Typy_Opon_insert_input!]!

    """on conflict condition"""
    on_conflict: Typy_Opon_on_conflict
  ): Typy_Opon_mutation_response

  """
  insert a single row into the table: "Typy_Opon"
  """
  insert_Typy_Opon_one(
    """the row to be inserted"""
    object: Typy_Opon_insert_input!

    """on conflict condition"""
    on_conflict: Typy_Opon_on_conflict
  ): Typy_Opon

  """
  insert data into the table: "Uzytkownik"
  """
  insert_Uzytkownik(
    """the rows to be inserted"""
    objects: [Uzytkownik_insert_input!]!

    """on conflict condition"""
    on_conflict: Uzytkownik_on_conflict
  ): Uzytkownik_mutation_response

  """
  insert a single row into the table: "Uzytkownik"
  """
  insert_Uzytkownik_one(
    """the row to be inserted"""
    object: Uzytkownik_insert_input!

    """on conflict condition"""
    on_conflict: Uzytkownik_on_conflict
  ): Uzytkownik

  """
  update data of the table: "Auto"
  """
  update_Auto(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Auto_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Auto_set_input

    """filter the rows which have to be updated"""
    where: Auto_bool_exp!
  ): Auto_mutation_response

  """
  update single row of the table: "Auto"
  """
  update_Auto_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Auto_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Auto_set_input
    pk_columns: Auto_pk_columns_input!
  ): Auto

  """
  update data of the table: "Awaria"
  """
  update_Awaria(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Awaria_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Awaria_set_input

    """filter the rows which have to be updated"""
    where: Awaria_bool_exp!
  ): Awaria_mutation_response

  """
  update single row of the table: "Awaria"
  """
  update_Awaria_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Awaria_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Awaria_set_input
    pk_columns: Awaria_pk_columns_input!
  ): Awaria

  """
  update data of the table: "Grupa_Aut_Klienta"
  """
  update_Grupa_Aut_Klienta(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Grupa_Aut_Klienta_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Grupa_Aut_Klienta_set_input

    """filter the rows which have to be updated"""
    where: Grupa_Aut_Klienta_bool_exp!
  ): Grupa_Aut_Klienta_mutation_response

  """
  update single row of the table: "Grupa_Aut_Klienta"
  """
  update_Grupa_Aut_Klienta_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Grupa_Aut_Klienta_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Grupa_Aut_Klienta_set_input
    pk_columns: Grupa_Aut_Klienta_pk_columns_input!
  ): Grupa_Aut_Klienta

  """
  update data of the table: "Historia_Uzytkownik_Auto"
  """
  update_Historia_Uzytkownik_Auto(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Historia_Uzytkownik_Auto_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Historia_Uzytkownik_Auto_set_input

    """filter the rows which have to be updated"""
    where: Historia_Uzytkownik_Auto_bool_exp!
  ): Historia_Uzytkownik_Auto_mutation_response

  """
  update single row of the table: "Historia_Uzytkownik_Auto"
  """
  update_Historia_Uzytkownik_Auto_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Historia_Uzytkownik_Auto_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Historia_Uzytkownik_Auto_set_input
    pk_columns: Historia_Uzytkownik_Auto_pk_columns_input!
  ): Historia_Uzytkownik_Auto

  """
  update data of the table: "Karta_Orlen"
  """
  update_Karta_Orlen(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Karta_Orlen_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Karta_Orlen_set_input

    """filter the rows which have to be updated"""
    where: Karta_Orlen_bool_exp!
  ): Karta_Orlen_mutation_response

  """
  update single row of the table: "Karta_Orlen"
  """
  update_Karta_Orlen_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Karta_Orlen_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Karta_Orlen_set_input
    pk_columns: Karta_Orlen_pk_columns_input!
  ): Karta_Orlen

  """
  update data of the table: "Klient"
  """
  update_Klient(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Klient_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Klient_set_input

    """filter the rows which have to be updated"""
    where: Klient_bool_exp!
  ): Klient_mutation_response

  """
  update single row of the table: "Klient"
  """
  update_Klient_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Klient_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Klient_set_input
    pk_columns: Klient_pk_columns_input!
  ): Klient

  """
  update data of the table: "Leasing"
  """
  update_Leasing(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Leasing_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Leasing_set_input

    """filter the rows which have to be updated"""
    where: Leasing_bool_exp!
  ): Leasing_mutation_response

  """
  update single row of the table: "Leasing"
  """
  update_Leasing_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Leasing_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Leasing_set_input
    pk_columns: Leasing_pk_columns_input!
  ): Leasing

  """
  update data of the table: "Mandat"
  """
  update_Mandat(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Mandat_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Mandat_set_input

    """filter the rows which have to be updated"""
    where: Mandat_bool_exp!
  ): Mandat_mutation_response

  """
  update single row of the table: "Mandat"
  """
  update_Mandat_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Mandat_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Mandat_set_input
    pk_columns: Mandat_pk_columns_input!
  ): Mandat

  """
  update data of the table: "Opona"
  """
  update_Opona(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Opona_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Opona_set_input

    """filter the rows which have to be updated"""
    where: Opona_bool_exp!
  ): Opona_mutation_response

  """
  update single row of the table: "Opona"
  """
  update_Opona_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Opona_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Opona_set_input
    pk_columns: Opona_pk_columns_input!
  ): Opona

  """
  update data of the table: "Polisa"
  """
  update_Polisa(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Polisa_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Polisa_set_input

    """filter the rows which have to be updated"""
    where: Polisa_bool_exp!
  ): Polisa_mutation_response

  """
  update single row of the table: "Polisa"
  """
  update_Polisa_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Polisa_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Polisa_set_input
    pk_columns: Polisa_pk_columns_input!
  ): Polisa

  """
  update data of the table: "Przebieg"
  """
  update_Przebieg(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Przebieg_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Przebieg_set_input

    """filter the rows which have to be updated"""
    where: Przebieg_bool_exp!
  ): Przebieg_mutation_response

  """
  update single row of the table: "Przebieg"
  """
  update_Przebieg_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Przebieg_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Przebieg_set_input
    pk_columns: Przebieg_pk_columns_input!
  ): Przebieg

  """
  update data of the table: "Przeglad"
  """
  update_Przeglad(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Przeglad_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Przeglad_set_input

    """filter the rows which have to be updated"""
    where: Przeglad_bool_exp!
  ): Przeglad_mutation_response

  """
  update data of the table: "Przeglad_Koszta_Dodatkowe"
  """
  update_Przeglad_Koszta_Dodatkowe(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Przeglad_Koszta_Dodatkowe_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Przeglad_Koszta_Dodatkowe_set_input

    """filter the rows which have to be updated"""
    where: Przeglad_Koszta_Dodatkowe_bool_exp!
  ): Przeglad_Koszta_Dodatkowe_mutation_response

  """
  update single row of the table: "Przeglad_Koszta_Dodatkowe"
  """
  update_Przeglad_Koszta_Dodatkowe_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Przeglad_Koszta_Dodatkowe_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Przeglad_Koszta_Dodatkowe_set_input
    pk_columns: Przeglad_Koszta_Dodatkowe_pk_columns_input!
  ): Przeglad_Koszta_Dodatkowe

  """
  update data of the table: "Przeglad_OT_Kilometry"
  """
  update_Przeglad_OT_Kilometry(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Przeglad_OT_Kilometry_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Przeglad_OT_Kilometry_set_input

    """filter the rows which have to be updated"""
    where: Przeglad_OT_Kilometry_bool_exp!
  ): Przeglad_OT_Kilometry_mutation_response

  """
  update single row of the table: "Przeglad_OT_Kilometry"
  """
  update_Przeglad_OT_Kilometry_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Przeglad_OT_Kilometry_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Przeglad_OT_Kilometry_set_input
    pk_columns: Przeglad_OT_Kilometry_pk_columns_input!
  ): Przeglad_OT_Kilometry

  """
  update single row of the table: "Przeglad"
  """
  update_Przeglad_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Przeglad_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Przeglad_set_input
    pk_columns: Przeglad_pk_columns_input!
  ): Przeglad

  """
  update data of the table: "Status_Awarii"
  """
  update_Status_Awarii(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Status_Awarii_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Status_Awarii_set_input

    """filter the rows which have to be updated"""
    where: Status_Awarii_bool_exp!
  ): Status_Awarii_mutation_response

  """
  update single row of the table: "Status_Awarii"
  """
  update_Status_Awarii_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Status_Awarii_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Status_Awarii_set_input
    pk_columns: Status_Awarii_pk_columns_input!
  ): Status_Awarii

  """
  update data of the table: "Status_Szkody"
  """
  update_Status_Szkody(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Status_Szkody_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Status_Szkody_set_input

    """filter the rows which have to be updated"""
    where: Status_Szkody_bool_exp!
  ): Status_Szkody_mutation_response

  """
  update single row of the table: "Status_Szkody"
  """
  update_Status_Szkody_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Status_Szkody_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Status_Szkody_set_input
    pk_columns: Status_Szkody_pk_columns_input!
  ): Status_Szkody

  """
  update data of the table: "Szkoda"
  """
  update_Szkoda(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Szkoda_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Szkoda_set_input

    """filter the rows which have to be updated"""
    where: Szkoda_bool_exp!
  ): Szkoda_mutation_response

  """
  update single row of the table: "Szkoda"
  """
  update_Szkoda_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Szkoda_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Szkoda_set_input
    pk_columns: Szkoda_pk_columns_input!
  ): Szkoda

  """
  update data of the table: "Typy_Opon"
  """
  update_Typy_Opon(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Typy_Opon_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Typy_Opon_set_input

    """filter the rows which have to be updated"""
    where: Typy_Opon_bool_exp!
  ): Typy_Opon_mutation_response

  """
  update single row of the table: "Typy_Opon"
  """
  update_Typy_Opon_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Typy_Opon_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Typy_Opon_set_input
    pk_columns: Typy_Opon_pk_columns_input!
  ): Typy_Opon

  """
  update data of the table: "Uzytkownik"
  """
  update_Uzytkownik(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Uzytkownik_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Uzytkownik_set_input

    """filter the rows which have to be updated"""
    where: Uzytkownik_bool_exp!
  ): Uzytkownik_mutation_response

  """
  update single row of the table: "Uzytkownik"
  """
  update_Uzytkownik_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Uzytkownik_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Uzytkownik_set_input
    pk_columns: Uzytkownik_pk_columns_input!
  ): Uzytkownik
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "Auto"
  """
  Auto(
    """distinct select on columns"""
    distinct_on: [Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auto_order_by!]

    """filter the rows returned"""
    where: Auto_bool_exp
  ): [Auto!]!

  """
  fetch aggregated fields from the table: "Auto"
  """
  Auto_aggregate(
    """distinct select on columns"""
    distinct_on: [Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auto_order_by!]

    """filter the rows returned"""
    where: Auto_bool_exp
  ): Auto_aggregate!

  """fetch data from the table: "Auto" using primary key columns"""
  Auto_by_pk(id: Int!): Auto

  """
  fetch data from the table: "Awaria"
  """
  Awaria(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): [Awaria!]!

  """
  fetch aggregated fields from the table: "Awaria"
  """
  Awaria_aggregate(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): Awaria_aggregate!

  """fetch data from the table: "Awaria" using primary key columns"""
  Awaria_by_pk(id: Int!): Awaria

  """
  fetch data from the table: "Grupa_Aut_Klienta"
  """
  Grupa_Aut_Klienta(
    """distinct select on columns"""
    distinct_on: [Grupa_Aut_Klienta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Grupa_Aut_Klienta_order_by!]

    """filter the rows returned"""
    where: Grupa_Aut_Klienta_bool_exp
  ): [Grupa_Aut_Klienta!]!

  """
  fetch aggregated fields from the table: "Grupa_Aut_Klienta"
  """
  Grupa_Aut_Klienta_aggregate(
    """distinct select on columns"""
    distinct_on: [Grupa_Aut_Klienta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Grupa_Aut_Klienta_order_by!]

    """filter the rows returned"""
    where: Grupa_Aut_Klienta_bool_exp
  ): Grupa_Aut_Klienta_aggregate!

  """
  fetch data from the table: "Grupa_Aut_Klienta" using primary key columns
  """
  Grupa_Aut_Klienta_by_pk(id: Int!): Grupa_Aut_Klienta

  """
  fetch data from the table: "Historia_Uzytkownik_Auto"
  """
  Historia_Uzytkownik_Auto(
    """distinct select on columns"""
    distinct_on: [Historia_Uzytkownik_Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Historia_Uzytkownik_Auto_order_by!]

    """filter the rows returned"""
    where: Historia_Uzytkownik_Auto_bool_exp
  ): [Historia_Uzytkownik_Auto!]!

  """
  fetch aggregated fields from the table: "Historia_Uzytkownik_Auto"
  """
  Historia_Uzytkownik_Auto_aggregate(
    """distinct select on columns"""
    distinct_on: [Historia_Uzytkownik_Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Historia_Uzytkownik_Auto_order_by!]

    """filter the rows returned"""
    where: Historia_Uzytkownik_Auto_bool_exp
  ): Historia_Uzytkownik_Auto_aggregate!

  """
  fetch data from the table: "Historia_Uzytkownik_Auto" using primary key columns
  """
  Historia_Uzytkownik_Auto_by_pk(id: Int!): Historia_Uzytkownik_Auto

  """
  fetch data from the table: "Karta_Orlen"
  """
  Karta_Orlen(
    """distinct select on columns"""
    distinct_on: [Karta_Orlen_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Karta_Orlen_order_by!]

    """filter the rows returned"""
    where: Karta_Orlen_bool_exp
  ): [Karta_Orlen!]!

  """
  fetch aggregated fields from the table: "Karta_Orlen"
  """
  Karta_Orlen_aggregate(
    """distinct select on columns"""
    distinct_on: [Karta_Orlen_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Karta_Orlen_order_by!]

    """filter the rows returned"""
    where: Karta_Orlen_bool_exp
  ): Karta_Orlen_aggregate!

  """fetch data from the table: "Karta_Orlen" using primary key columns"""
  Karta_Orlen_by_pk(id: Int!): Karta_Orlen

  """
  fetch data from the table: "Klient"
  """
  Klient(
    """distinct select on columns"""
    distinct_on: [Klient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Klient_order_by!]

    """filter the rows returned"""
    where: Klient_bool_exp
  ): [Klient!]!

  """
  fetch aggregated fields from the table: "Klient"
  """
  Klient_aggregate(
    """distinct select on columns"""
    distinct_on: [Klient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Klient_order_by!]

    """filter the rows returned"""
    where: Klient_bool_exp
  ): Klient_aggregate!

  """fetch data from the table: "Klient" using primary key columns"""
  Klient_by_pk(id: Int!): Klient

  """
  fetch data from the table: "Leasing"
  """
  Leasing(
    """distinct select on columns"""
    distinct_on: [Leasing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Leasing_order_by!]

    """filter the rows returned"""
    where: Leasing_bool_exp
  ): [Leasing!]!

  """
  fetch aggregated fields from the table: "Leasing"
  """
  Leasing_aggregate(
    """distinct select on columns"""
    distinct_on: [Leasing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Leasing_order_by!]

    """filter the rows returned"""
    where: Leasing_bool_exp
  ): Leasing_aggregate!

  """fetch data from the table: "Leasing" using primary key columns"""
  Leasing_by_pk(id: Int!): Leasing

  """
  fetch data from the table: "Mandat"
  """
  Mandat(
    """distinct select on columns"""
    distinct_on: [Mandat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Mandat_order_by!]

    """filter the rows returned"""
    where: Mandat_bool_exp
  ): [Mandat!]!

  """
  fetch aggregated fields from the table: "Mandat"
  """
  Mandat_aggregate(
    """distinct select on columns"""
    distinct_on: [Mandat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Mandat_order_by!]

    """filter the rows returned"""
    where: Mandat_bool_exp
  ): Mandat_aggregate!

  """fetch data from the table: "Mandat" using primary key columns"""
  Mandat_by_pk(id: Int!): Mandat

  """
  fetch data from the table: "Opona"
  """
  Opona(
    """distinct select on columns"""
    distinct_on: [Opona_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Opona_order_by!]

    """filter the rows returned"""
    where: Opona_bool_exp
  ): [Opona!]!

  """
  fetch aggregated fields from the table: "Opona"
  """
  Opona_aggregate(
    """distinct select on columns"""
    distinct_on: [Opona_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Opona_order_by!]

    """filter the rows returned"""
    where: Opona_bool_exp
  ): Opona_aggregate!

  """fetch data from the table: "Opona" using primary key columns"""
  Opona_by_pk(id: Int!): Opona

  """
  fetch data from the table: "Polisa"
  """
  Polisa(
    """distinct select on columns"""
    distinct_on: [Polisa_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Polisa_order_by!]

    """filter the rows returned"""
    where: Polisa_bool_exp
  ): [Polisa!]!

  """
  fetch aggregated fields from the table: "Polisa"
  """
  Polisa_aggregate(
    """distinct select on columns"""
    distinct_on: [Polisa_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Polisa_order_by!]

    """filter the rows returned"""
    where: Polisa_bool_exp
  ): Polisa_aggregate!

  """fetch data from the table: "Polisa" using primary key columns"""
  Polisa_by_pk(id: Int!): Polisa

  """
  fetch data from the table: "Przebieg"
  """
  Przebieg(
    """distinct select on columns"""
    distinct_on: [Przebieg_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przebieg_order_by!]

    """filter the rows returned"""
    where: Przebieg_bool_exp
  ): [Przebieg!]!

  """
  fetch aggregated fields from the table: "Przebieg"
  """
  Przebieg_aggregate(
    """distinct select on columns"""
    distinct_on: [Przebieg_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przebieg_order_by!]

    """filter the rows returned"""
    where: Przebieg_bool_exp
  ): Przebieg_aggregate!

  """fetch data from the table: "Przebieg" using primary key columns"""
  Przebieg_by_pk(id: Int!): Przebieg

  """
  fetch data from the table: "Przeglad"
  """
  Przeglad(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): [Przeglad!]!

  """
  fetch data from the table: "Przeglad_Koszta_Dodatkowe"
  """
  Przeglad_Koszta_Dodatkowe(
    """distinct select on columns"""
    distinct_on: [Przeglad_Koszta_Dodatkowe_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_Koszta_Dodatkowe_order_by!]

    """filter the rows returned"""
    where: Przeglad_Koszta_Dodatkowe_bool_exp
  ): [Przeglad_Koszta_Dodatkowe!]!

  """
  fetch aggregated fields from the table: "Przeglad_Koszta_Dodatkowe"
  """
  Przeglad_Koszta_Dodatkowe_aggregate(
    """distinct select on columns"""
    distinct_on: [Przeglad_Koszta_Dodatkowe_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_Koszta_Dodatkowe_order_by!]

    """filter the rows returned"""
    where: Przeglad_Koszta_Dodatkowe_bool_exp
  ): Przeglad_Koszta_Dodatkowe_aggregate!

  """
  fetch data from the table: "Przeglad_Koszta_Dodatkowe" using primary key columns
  """
  Przeglad_Koszta_Dodatkowe_by_pk(id: Int!): Przeglad_Koszta_Dodatkowe

  """
  fetch data from the table: "Przeglad_OT_Kilometry"
  """
  Przeglad_OT_Kilometry(
    """distinct select on columns"""
    distinct_on: [Przeglad_OT_Kilometry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_OT_Kilometry_order_by!]

    """filter the rows returned"""
    where: Przeglad_OT_Kilometry_bool_exp
  ): [Przeglad_OT_Kilometry!]!

  """
  fetch aggregated fields from the table: "Przeglad_OT_Kilometry"
  """
  Przeglad_OT_Kilometry_aggregate(
    """distinct select on columns"""
    distinct_on: [Przeglad_OT_Kilometry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_OT_Kilometry_order_by!]

    """filter the rows returned"""
    where: Przeglad_OT_Kilometry_bool_exp
  ): Przeglad_OT_Kilometry_aggregate!

  """
  fetch data from the table: "Przeglad_OT_Kilometry" using primary key columns
  """
  Przeglad_OT_Kilometry_by_pk(id: Int!): Przeglad_OT_Kilometry

  """
  fetch aggregated fields from the table: "Przeglad"
  """
  Przeglad_aggregate(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): Przeglad_aggregate!

  """fetch data from the table: "Przeglad" using primary key columns"""
  Przeglad_by_pk(id: Int!): Przeglad

  """
  fetch data from the table: "Status_Awarii"
  """
  Status_Awarii(
    """distinct select on columns"""
    distinct_on: [Status_Awarii_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Status_Awarii_order_by!]

    """filter the rows returned"""
    where: Status_Awarii_bool_exp
  ): [Status_Awarii!]!

  """
  fetch aggregated fields from the table: "Status_Awarii"
  """
  Status_Awarii_aggregate(
    """distinct select on columns"""
    distinct_on: [Status_Awarii_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Status_Awarii_order_by!]

    """filter the rows returned"""
    where: Status_Awarii_bool_exp
  ): Status_Awarii_aggregate!

  """fetch data from the table: "Status_Awarii" using primary key columns"""
  Status_Awarii_by_pk(id: Int!): Status_Awarii

  """
  fetch data from the table: "Status_Szkody"
  """
  Status_Szkody(
    """distinct select on columns"""
    distinct_on: [Status_Szkody_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Status_Szkody_order_by!]

    """filter the rows returned"""
    where: Status_Szkody_bool_exp
  ): [Status_Szkody!]!

  """
  fetch aggregated fields from the table: "Status_Szkody"
  """
  Status_Szkody_aggregate(
    """distinct select on columns"""
    distinct_on: [Status_Szkody_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Status_Szkody_order_by!]

    """filter the rows returned"""
    where: Status_Szkody_bool_exp
  ): Status_Szkody_aggregate!

  """fetch data from the table: "Status_Szkody" using primary key columns"""
  Status_Szkody_by_pk(id: Int!): Status_Szkody

  """
  fetch data from the table: "Szkoda"
  """
  Szkoda(
    """distinct select on columns"""
    distinct_on: [Szkoda_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Szkoda_order_by!]

    """filter the rows returned"""
    where: Szkoda_bool_exp
  ): [Szkoda!]!

  """
  fetch aggregated fields from the table: "Szkoda"
  """
  Szkoda_aggregate(
    """distinct select on columns"""
    distinct_on: [Szkoda_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Szkoda_order_by!]

    """filter the rows returned"""
    where: Szkoda_bool_exp
  ): Szkoda_aggregate!

  """fetch data from the table: "Szkoda" using primary key columns"""
  Szkoda_by_pk(id: Int!): Szkoda

  """
  fetch data from the table: "Typy_Opon"
  """
  Typy_Opon(
    """distinct select on columns"""
    distinct_on: [Typy_Opon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Typy_Opon_order_by!]

    """filter the rows returned"""
    where: Typy_Opon_bool_exp
  ): [Typy_Opon!]!

  """
  fetch aggregated fields from the table: "Typy_Opon"
  """
  Typy_Opon_aggregate(
    """distinct select on columns"""
    distinct_on: [Typy_Opon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Typy_Opon_order_by!]

    """filter the rows returned"""
    where: Typy_Opon_bool_exp
  ): Typy_Opon_aggregate!

  """fetch data from the table: "Typy_Opon" using primary key columns"""
  Typy_Opon_by_pk(id: Int!): Typy_Opon

  """
  fetch data from the table: "Uzytkownik"
  """
  Uzytkownik(
    """distinct select on columns"""
    distinct_on: [Uzytkownik_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Uzytkownik_order_by!]

    """filter the rows returned"""
    where: Uzytkownik_bool_exp
  ): [Uzytkownik!]!

  """
  fetch aggregated fields from the table: "Uzytkownik"
  """
  Uzytkownik_aggregate(
    """distinct select on columns"""
    distinct_on: [Uzytkownik_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Uzytkownik_order_by!]

    """filter the rows returned"""
    where: Uzytkownik_bool_exp
  ): Uzytkownik_aggregate!

  """fetch data from the table: "Uzytkownik" using primary key columns"""
  Uzytkownik_by_pk(id: Int!): Uzytkownik
}

type subscription_root {
  """
  fetch data from the table: "Auto"
  """
  Auto(
    """distinct select on columns"""
    distinct_on: [Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auto_order_by!]

    """filter the rows returned"""
    where: Auto_bool_exp
  ): [Auto!]!

  """
  fetch aggregated fields from the table: "Auto"
  """
  Auto_aggregate(
    """distinct select on columns"""
    distinct_on: [Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Auto_order_by!]

    """filter the rows returned"""
    where: Auto_bool_exp
  ): Auto_aggregate!

  """fetch data from the table: "Auto" using primary key columns"""
  Auto_by_pk(id: Int!): Auto

  """
  fetch data from the table: "Awaria"
  """
  Awaria(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): [Awaria!]!

  """
  fetch aggregated fields from the table: "Awaria"
  """
  Awaria_aggregate(
    """distinct select on columns"""
    distinct_on: [Awaria_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Awaria_order_by!]

    """filter the rows returned"""
    where: Awaria_bool_exp
  ): Awaria_aggregate!

  """fetch data from the table: "Awaria" using primary key columns"""
  Awaria_by_pk(id: Int!): Awaria

  """
  fetch data from the table: "Grupa_Aut_Klienta"
  """
  Grupa_Aut_Klienta(
    """distinct select on columns"""
    distinct_on: [Grupa_Aut_Klienta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Grupa_Aut_Klienta_order_by!]

    """filter the rows returned"""
    where: Grupa_Aut_Klienta_bool_exp
  ): [Grupa_Aut_Klienta!]!

  """
  fetch aggregated fields from the table: "Grupa_Aut_Klienta"
  """
  Grupa_Aut_Klienta_aggregate(
    """distinct select on columns"""
    distinct_on: [Grupa_Aut_Klienta_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Grupa_Aut_Klienta_order_by!]

    """filter the rows returned"""
    where: Grupa_Aut_Klienta_bool_exp
  ): Grupa_Aut_Klienta_aggregate!

  """
  fetch data from the table: "Grupa_Aut_Klienta" using primary key columns
  """
  Grupa_Aut_Klienta_by_pk(id: Int!): Grupa_Aut_Klienta

  """
  fetch data from the table: "Historia_Uzytkownik_Auto"
  """
  Historia_Uzytkownik_Auto(
    """distinct select on columns"""
    distinct_on: [Historia_Uzytkownik_Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Historia_Uzytkownik_Auto_order_by!]

    """filter the rows returned"""
    where: Historia_Uzytkownik_Auto_bool_exp
  ): [Historia_Uzytkownik_Auto!]!

  """
  fetch aggregated fields from the table: "Historia_Uzytkownik_Auto"
  """
  Historia_Uzytkownik_Auto_aggregate(
    """distinct select on columns"""
    distinct_on: [Historia_Uzytkownik_Auto_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Historia_Uzytkownik_Auto_order_by!]

    """filter the rows returned"""
    where: Historia_Uzytkownik_Auto_bool_exp
  ): Historia_Uzytkownik_Auto_aggregate!

  """
  fetch data from the table: "Historia_Uzytkownik_Auto" using primary key columns
  """
  Historia_Uzytkownik_Auto_by_pk(id: Int!): Historia_Uzytkownik_Auto

  """
  fetch data from the table: "Karta_Orlen"
  """
  Karta_Orlen(
    """distinct select on columns"""
    distinct_on: [Karta_Orlen_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Karta_Orlen_order_by!]

    """filter the rows returned"""
    where: Karta_Orlen_bool_exp
  ): [Karta_Orlen!]!

  """
  fetch aggregated fields from the table: "Karta_Orlen"
  """
  Karta_Orlen_aggregate(
    """distinct select on columns"""
    distinct_on: [Karta_Orlen_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Karta_Orlen_order_by!]

    """filter the rows returned"""
    where: Karta_Orlen_bool_exp
  ): Karta_Orlen_aggregate!

  """fetch data from the table: "Karta_Orlen" using primary key columns"""
  Karta_Orlen_by_pk(id: Int!): Karta_Orlen

  """
  fetch data from the table: "Klient"
  """
  Klient(
    """distinct select on columns"""
    distinct_on: [Klient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Klient_order_by!]

    """filter the rows returned"""
    where: Klient_bool_exp
  ): [Klient!]!

  """
  fetch aggregated fields from the table: "Klient"
  """
  Klient_aggregate(
    """distinct select on columns"""
    distinct_on: [Klient_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Klient_order_by!]

    """filter the rows returned"""
    where: Klient_bool_exp
  ): Klient_aggregate!

  """fetch data from the table: "Klient" using primary key columns"""
  Klient_by_pk(id: Int!): Klient

  """
  fetch data from the table: "Leasing"
  """
  Leasing(
    """distinct select on columns"""
    distinct_on: [Leasing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Leasing_order_by!]

    """filter the rows returned"""
    where: Leasing_bool_exp
  ): [Leasing!]!

  """
  fetch aggregated fields from the table: "Leasing"
  """
  Leasing_aggregate(
    """distinct select on columns"""
    distinct_on: [Leasing_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Leasing_order_by!]

    """filter the rows returned"""
    where: Leasing_bool_exp
  ): Leasing_aggregate!

  """fetch data from the table: "Leasing" using primary key columns"""
  Leasing_by_pk(id: Int!): Leasing

  """
  fetch data from the table: "Mandat"
  """
  Mandat(
    """distinct select on columns"""
    distinct_on: [Mandat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Mandat_order_by!]

    """filter the rows returned"""
    where: Mandat_bool_exp
  ): [Mandat!]!

  """
  fetch aggregated fields from the table: "Mandat"
  """
  Mandat_aggregate(
    """distinct select on columns"""
    distinct_on: [Mandat_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Mandat_order_by!]

    """filter the rows returned"""
    where: Mandat_bool_exp
  ): Mandat_aggregate!

  """fetch data from the table: "Mandat" using primary key columns"""
  Mandat_by_pk(id: Int!): Mandat

  """
  fetch data from the table: "Opona"
  """
  Opona(
    """distinct select on columns"""
    distinct_on: [Opona_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Opona_order_by!]

    """filter the rows returned"""
    where: Opona_bool_exp
  ): [Opona!]!

  """
  fetch aggregated fields from the table: "Opona"
  """
  Opona_aggregate(
    """distinct select on columns"""
    distinct_on: [Opona_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Opona_order_by!]

    """filter the rows returned"""
    where: Opona_bool_exp
  ): Opona_aggregate!

  """fetch data from the table: "Opona" using primary key columns"""
  Opona_by_pk(id: Int!): Opona

  """
  fetch data from the table: "Polisa"
  """
  Polisa(
    """distinct select on columns"""
    distinct_on: [Polisa_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Polisa_order_by!]

    """filter the rows returned"""
    where: Polisa_bool_exp
  ): [Polisa!]!

  """
  fetch aggregated fields from the table: "Polisa"
  """
  Polisa_aggregate(
    """distinct select on columns"""
    distinct_on: [Polisa_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Polisa_order_by!]

    """filter the rows returned"""
    where: Polisa_bool_exp
  ): Polisa_aggregate!

  """fetch data from the table: "Polisa" using primary key columns"""
  Polisa_by_pk(id: Int!): Polisa

  """
  fetch data from the table: "Przebieg"
  """
  Przebieg(
    """distinct select on columns"""
    distinct_on: [Przebieg_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przebieg_order_by!]

    """filter the rows returned"""
    where: Przebieg_bool_exp
  ): [Przebieg!]!

  """
  fetch aggregated fields from the table: "Przebieg"
  """
  Przebieg_aggregate(
    """distinct select on columns"""
    distinct_on: [Przebieg_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przebieg_order_by!]

    """filter the rows returned"""
    where: Przebieg_bool_exp
  ): Przebieg_aggregate!

  """fetch data from the table: "Przebieg" using primary key columns"""
  Przebieg_by_pk(id: Int!): Przebieg

  """
  fetch data from the table: "Przeglad"
  """
  Przeglad(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): [Przeglad!]!

  """
  fetch data from the table: "Przeglad_Koszta_Dodatkowe"
  """
  Przeglad_Koszta_Dodatkowe(
    """distinct select on columns"""
    distinct_on: [Przeglad_Koszta_Dodatkowe_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_Koszta_Dodatkowe_order_by!]

    """filter the rows returned"""
    where: Przeglad_Koszta_Dodatkowe_bool_exp
  ): [Przeglad_Koszta_Dodatkowe!]!

  """
  fetch aggregated fields from the table: "Przeglad_Koszta_Dodatkowe"
  """
  Przeglad_Koszta_Dodatkowe_aggregate(
    """distinct select on columns"""
    distinct_on: [Przeglad_Koszta_Dodatkowe_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_Koszta_Dodatkowe_order_by!]

    """filter the rows returned"""
    where: Przeglad_Koszta_Dodatkowe_bool_exp
  ): Przeglad_Koszta_Dodatkowe_aggregate!

  """
  fetch data from the table: "Przeglad_Koszta_Dodatkowe" using primary key columns
  """
  Przeglad_Koszta_Dodatkowe_by_pk(id: Int!): Przeglad_Koszta_Dodatkowe

  """
  fetch data from the table: "Przeglad_OT_Kilometry"
  """
  Przeglad_OT_Kilometry(
    """distinct select on columns"""
    distinct_on: [Przeglad_OT_Kilometry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_OT_Kilometry_order_by!]

    """filter the rows returned"""
    where: Przeglad_OT_Kilometry_bool_exp
  ): [Przeglad_OT_Kilometry!]!

  """
  fetch aggregated fields from the table: "Przeglad_OT_Kilometry"
  """
  Przeglad_OT_Kilometry_aggregate(
    """distinct select on columns"""
    distinct_on: [Przeglad_OT_Kilometry_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_OT_Kilometry_order_by!]

    """filter the rows returned"""
    where: Przeglad_OT_Kilometry_bool_exp
  ): Przeglad_OT_Kilometry_aggregate!

  """
  fetch data from the table: "Przeglad_OT_Kilometry" using primary key columns
  """
  Przeglad_OT_Kilometry_by_pk(id: Int!): Przeglad_OT_Kilometry

  """
  fetch aggregated fields from the table: "Przeglad"
  """
  Przeglad_aggregate(
    """distinct select on columns"""
    distinct_on: [Przeglad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Przeglad_order_by!]

    """filter the rows returned"""
    where: Przeglad_bool_exp
  ): Przeglad_aggregate!

  """fetch data from the table: "Przeglad" using primary key columns"""
  Przeglad_by_pk(id: Int!): Przeglad

  """
  fetch data from the table: "Status_Awarii"
  """
  Status_Awarii(
    """distinct select on columns"""
    distinct_on: [Status_Awarii_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Status_Awarii_order_by!]

    """filter the rows returned"""
    where: Status_Awarii_bool_exp
  ): [Status_Awarii!]!

  """
  fetch aggregated fields from the table: "Status_Awarii"
  """
  Status_Awarii_aggregate(
    """distinct select on columns"""
    distinct_on: [Status_Awarii_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Status_Awarii_order_by!]

    """filter the rows returned"""
    where: Status_Awarii_bool_exp
  ): Status_Awarii_aggregate!

  """fetch data from the table: "Status_Awarii" using primary key columns"""
  Status_Awarii_by_pk(id: Int!): Status_Awarii

  """
  fetch data from the table: "Status_Szkody"
  """
  Status_Szkody(
    """distinct select on columns"""
    distinct_on: [Status_Szkody_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Status_Szkody_order_by!]

    """filter the rows returned"""
    where: Status_Szkody_bool_exp
  ): [Status_Szkody!]!

  """
  fetch aggregated fields from the table: "Status_Szkody"
  """
  Status_Szkody_aggregate(
    """distinct select on columns"""
    distinct_on: [Status_Szkody_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Status_Szkody_order_by!]

    """filter the rows returned"""
    where: Status_Szkody_bool_exp
  ): Status_Szkody_aggregate!

  """fetch data from the table: "Status_Szkody" using primary key columns"""
  Status_Szkody_by_pk(id: Int!): Status_Szkody

  """
  fetch data from the table: "Szkoda"
  """
  Szkoda(
    """distinct select on columns"""
    distinct_on: [Szkoda_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Szkoda_order_by!]

    """filter the rows returned"""
    where: Szkoda_bool_exp
  ): [Szkoda!]!

  """
  fetch aggregated fields from the table: "Szkoda"
  """
  Szkoda_aggregate(
    """distinct select on columns"""
    distinct_on: [Szkoda_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Szkoda_order_by!]

    """filter the rows returned"""
    where: Szkoda_bool_exp
  ): Szkoda_aggregate!

  """fetch data from the table: "Szkoda" using primary key columns"""
  Szkoda_by_pk(id: Int!): Szkoda

  """
  fetch data from the table: "Typy_Opon"
  """
  Typy_Opon(
    """distinct select on columns"""
    distinct_on: [Typy_Opon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Typy_Opon_order_by!]

    """filter the rows returned"""
    where: Typy_Opon_bool_exp
  ): [Typy_Opon!]!

  """
  fetch aggregated fields from the table: "Typy_Opon"
  """
  Typy_Opon_aggregate(
    """distinct select on columns"""
    distinct_on: [Typy_Opon_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Typy_Opon_order_by!]

    """filter the rows returned"""
    where: Typy_Opon_bool_exp
  ): Typy_Opon_aggregate!

  """fetch data from the table: "Typy_Opon" using primary key columns"""
  Typy_Opon_by_pk(id: Int!): Typy_Opon

  """
  fetch data from the table: "Uzytkownik"
  """
  Uzytkownik(
    """distinct select on columns"""
    distinct_on: [Uzytkownik_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Uzytkownik_order_by!]

    """filter the rows returned"""
    where: Uzytkownik_bool_exp
  ): [Uzytkownik!]!

  """
  fetch aggregated fields from the table: "Uzytkownik"
  """
  Uzytkownik_aggregate(
    """distinct select on columns"""
    distinct_on: [Uzytkownik_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Uzytkownik_order_by!]

    """filter the rows returned"""
    where: Uzytkownik_bool_exp
  ): Uzytkownik_aggregate!

  """fetch data from the table: "Uzytkownik" using primary key columns"""
  Uzytkownik_by_pk(id: Int!): Uzytkownik
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
